/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace SwapHelper {
  export type RecvSwapInParametersStruct = {
    estimatedAmount: PromiseOrValue<BigNumberish>;
    recipientAddress: PromiseOrValue<BytesLike>;
    path: [PromiseOrValue<string>, PromiseOrValue<string>];
    deadline: PromiseOrValue<BigNumberish>;
    poolFee: PromiseOrValue<BigNumberish>;
    relayerFee: PromiseOrValue<BigNumberish>;
  };

  export type RecvSwapInParametersStructOutput = [
    BigNumber,
    string,
    [string, string],
    BigNumber,
    number,
    BigNumber
  ] & {
    estimatedAmount: BigNumber;
    recipientAddress: string;
    path: [string, string];
    deadline: BigNumber;
    poolFee: number;
    relayerFee: BigNumber;
  };
}

export interface SwapHelperInterface extends utils.Interface {
  functions: {
    "decodeSwapInParameters(bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "decodeSwapInParameters"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "decodeSwapInParameters",
    values: [PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "decodeSwapInParameters",
    data: BytesLike
  ): Result;

  events: {};
}

export interface SwapHelper extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SwapHelperInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    decodeSwapInParameters(
      encoded: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [SwapHelper.RecvSwapInParametersStructOutput] & {
        params: SwapHelper.RecvSwapInParametersStructOutput;
      }
    >;
  };

  decodeSwapInParameters(
    encoded: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<SwapHelper.RecvSwapInParametersStructOutput>;

  callStatic: {
    decodeSwapInParameters(
      encoded: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<SwapHelper.RecvSwapInParametersStructOutput>;
  };

  filters: {};

  estimateGas: {
    decodeSwapInParameters(
      encoded: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    decodeSwapInParameters(
      encoded: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
