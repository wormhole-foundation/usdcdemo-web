/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { SwapHelper, SwapHelperInterface } from "../SwapHelper";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes",
        name: "encoded",
        type: "bytes",
      },
    ],
    name: "decodeSwapInParameters",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "estimatedAmount",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "recipientAddress",
            type: "bytes32",
          },
          {
            internalType: "address[2]",
            name: "path",
            type: "address[2]",
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256",
          },
          {
            internalType: "uint24",
            name: "poolFee",
            type: "uint24",
          },
          {
            internalType: "uint256",
            name: "relayerFee",
            type: "uint256",
          },
        ],
        internalType: "struct SwapHelper.RecvSwapInParameters",
        name: "params",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610cc4806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063943650e914610030575b600080fd5b61004a600480360381019061004591906106c9565b610060565b60405161005791906108ba565b60405180910390f35b610068610509565b60008061007e82856102f790919063ffffffff16565b905060018261008d9190610904565b915060018160ff16146100d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100cc906109b7565b60405180910390fd5b6100e8828561035e90919063ffffffff16565b8360000181815250506020826100fe9190610904565b915061011382856103c590919063ffffffff16565b8360200181815250506020826101299190610904565b915061013e828561042c90919063ffffffff16565b8360400151600060028110610156576101556109d7565b5b602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505060148261019a9190610904565b91506101af828561042c90919063ffffffff16565b83604001516001600281106101c7576101c66109d7565b5b602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505060148261020b9190610904565b9150610220828561035e90919063ffffffff16565b8360600181815250506020826102369190610904565b91506001826102459190610904565b915061025a82856104a290919063ffffffff16565b61ffff16836080019062ffffff16908162ffffff16815250506002826102809190610904565b9150610295828561035e90919063ffffffff16565b8360a00181815250506020826102ab9190610904565b9150835182146102f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102e790610a52565b60405180910390fd5b5050919050565b60006001826103069190610904565b83511015610349576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034090610abe565b60405180910390fd5b60008260018501015190508091505092915050565b600060208261036d9190610904565b835110156103b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103a790610b2a565b60405180910390fd5b60008260208501015190508091505092915050565b60006020826103d49190610904565b83511015610417576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040e90610b96565b60405180910390fd5b60008260208501015190508091505092915050565b600060148261043b9190610904565b8351101561047e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047590610c02565b60405180910390fd5b60006c01000000000000000000000000836020860101510490508091505092915050565b60006002826104b19190610904565b835110156104f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104eb90610c6e565b60405180910390fd5b60008260028501015190508091505092915050565b6040518060c00160405280600081526020016000801916815260200161052d61054d565b815260200160008152602001600062ffffff168152602001600081525090565b6040518060400160405280600290602082028036833780820191505090505090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6105d68261058d565b810181811067ffffffffffffffff821117156105f5576105f461059e565b5b80604052505050565b600061060861056f565b905061061482826105cd565b919050565b600067ffffffffffffffff8211156106345761063361059e565b5b61063d8261058d565b9050602081019050919050565b82818337600083830152505050565b600061066c61066784610619565b6105fe565b90508281526020810184848401111561068857610687610588565b5b61069384828561064a565b509392505050565b600082601f8301126106b0576106af610583565b5b81356106c0848260208601610659565b91505092915050565b6000602082840312156106df576106de610579565b5b600082013567ffffffffffffffff8111156106fd576106fc61057e565b5b6107098482850161069b565b91505092915050565b6000819050919050565b61072581610712565b82525050565b6000819050919050565b61073e8161072b565b82525050565b600060029050919050565b600081905092915050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061078f82610764565b9050919050565b61079f81610784565b82525050565b60006107b18383610796565b60208301905092915050565b6000602082019050919050565b6107d381610744565b6107dd818461074f565b92506107e88261075a565b8060005b8381101561081957815161080087826107a5565b965061080b836107bd565b9250506001810190506107ec565b505050505050565b600062ffffff82169050919050565b61083981610821565b82525050565b60e082016000820151610855600085018261071c565b5060208201516108686020850182610735565b50604082015161087b60408501826107ca565b50606082015161088e608085018261071c565b5060808201516108a160a0850182610830565b5060a08201516108b460c085018261071c565b50505050565b600060e0820190506108cf600083018461083f565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061090f82610712565b915061091a83610712565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561094f5761094e6108d5565b5b828201905092915050565b600082825260208201905092915050565b7f696e76616c6964207061796c6f61640000000000000000000000000000000000600082015250565b60006109a1600f8361095a565b91506109ac8261096b565b602082019050919050565b600060208201905081810360008301526109d081610994565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f696e76616c69642073776170207061796c6f6164000000000000000000000000600082015250565b6000610a3c60148361095a565b9150610a4782610a06565b602082019050919050565b60006020820190508181036000830152610a6b81610a2f565b9050919050565b7f746f55696e74385f6f75744f66426f756e647300000000000000000000000000600082015250565b6000610aa860138361095a565b9150610ab382610a72565b602082019050919050565b60006020820190508181036000830152610ad781610a9b565b9050919050565b7f746f55696e743235365f6f75744f66426f756e64730000000000000000000000600082015250565b6000610b1460158361095a565b9150610b1f82610ade565b602082019050919050565b60006020820190508181036000830152610b4381610b07565b9050919050565b7f746f427974657333325f6f75744f66426f756e64730000000000000000000000600082015250565b6000610b8060158361095a565b9150610b8b82610b4a565b602082019050919050565b60006020820190508181036000830152610baf81610b73565b9050919050565b7f746f416464726573735f6f75744f66426f756e64730000000000000000000000600082015250565b6000610bec60158361095a565b9150610bf782610bb6565b602082019050919050565b60006020820190508181036000830152610c1b81610bdf565b9050919050565b7f746f55696e7431365f6f75744f66426f756e6473000000000000000000000000600082015250565b6000610c5860148361095a565b9150610c6382610c22565b602082019050919050565b60006020820190508181036000830152610c8781610c4b565b905091905056fea2646970667358221220736ac4e73d46385fb30a116a2ce9f037ec93f6d64bf18ae71845a1e0eab5620264736f6c634300080d0033";

type SwapHelperConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SwapHelperConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SwapHelper__factory extends ContractFactory {
  constructor(...args: SwapHelperConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SwapHelper> {
    return super.deploy(overrides || {}) as Promise<SwapHelper>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): SwapHelper {
    return super.attach(address) as SwapHelper;
  }
  override connect(signer: Signer): SwapHelper__factory {
    return super.connect(signer) as SwapHelper__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SwapHelperInterface {
    return new utils.Interface(_abi) as SwapHelperInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SwapHelper {
    return new Contract(address, _abi, signerOrProvider) as SwapHelper;
  }
}
