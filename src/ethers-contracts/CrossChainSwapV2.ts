/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace SwapHelper {
  export type RecvSwapInParametersStruct = {
    estimatedAmount: PromiseOrValue<BigNumberish>;
    recipientAddress: PromiseOrValue<BytesLike>;
    path: [PromiseOrValue<string>, PromiseOrValue<string>];
    deadline: PromiseOrValue<BigNumberish>;
    poolFee: PromiseOrValue<BigNumberish>;
    relayerFee: PromiseOrValue<BigNumberish>;
  };

  export type RecvSwapInParametersStructOutput = [
    BigNumber,
    string,
    [string, string],
    BigNumber,
    number,
    BigNumber
  ] & {
    estimatedAmount: BigNumber;
    recipientAddress: string;
    path: [string, string];
    deadline: BigNumber;
    poolFee: number;
    relayerFee: BigNumber;
  };

  export type ExactInParametersStruct = {
    amountIn: PromiseOrValue<BigNumberish>;
    amountOutMinimum: PromiseOrValue<BigNumberish>;
    targetAmountOutMinimum: PromiseOrValue<BigNumberish>;
    targetChainRecipient: PromiseOrValue<BytesLike>;
    deadline: PromiseOrValue<BigNumberish>;
    poolFee: PromiseOrValue<BigNumberish>;
  };

  export type ExactInParametersStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    number
  ] & {
    amountIn: BigNumber;
    amountOutMinimum: BigNumber;
    targetAmountOutMinimum: BigNumber;
    targetChainRecipient: string;
    deadline: BigNumber;
    poolFee: number;
  };
}

export declare namespace ICircleIntegration {
  export type RedeemParametersStruct = {
    encodedWormholeMessage: PromiseOrValue<BytesLike>;
    circleBridgeMessage: PromiseOrValue<BytesLike>;
    circleAttestation: PromiseOrValue<BytesLike>;
  };

  export type RedeemParametersStructOutput = [string, string, string] & {
    encodedWormholeMessage: string;
    circleBridgeMessage: string;
    circleAttestation: string;
  };
}

export interface CrossChainSwapV2Interface extends utils.Interface {
  functions: {
    "CIRCLE_INTEGRATION()": FunctionFragment;
    "SWAP_ROUTER()": FunctionFragment;
    "USDC_ADDRESS()": FunctionFragment;
    "WORMHOLE()": FunctionFragment;
    "WRAPPED_NATIVE_ADDRESS()": FunctionFragment;
    "decodeSwapInParameters(bytes)": FunctionFragment;
    "swapExactNativeInAndTransfer((uint256,uint256,uint256,bytes32,uint256,uint24),address[],uint256,uint16,bytes32)": FunctionFragment;
    "recvAndSwapExactNativeIn((bytes,bytes,bytes))": FunctionFragment;
    "registerContract(uint16,bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "CIRCLE_INTEGRATION"
      | "SWAP_ROUTER"
      | "USDC_ADDRESS"
      | "WORMHOLE"
      | "WRAPPED_NATIVE_ADDRESS"
      | "decodeSwapInParameters"
      | "swapExactNativeInAndTransfer"
      | "recvAndSwapExactNativeIn"
      | "registerContract"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "CIRCLE_INTEGRATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SWAP_ROUTER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "USDC_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "WORMHOLE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "WRAPPED_NATIVE_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "decodeSwapInParameters",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactNativeInAndTransfer",
    values: [
      SwapHelper.ExactInParametersStruct,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "recvAndSwapExactNativeIn",
    values: [ICircleIntegration.RedeemParametersStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "registerContract",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "CIRCLE_INTEGRATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SWAP_ROUTER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "USDC_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "WORMHOLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "WRAPPED_NATIVE_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decodeSwapInParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactNativeInAndTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recvAndSwapExactNativeIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerContract",
    data: BytesLike
  ): Result;

  events: {
    "SwapResult(address,address,address,uint256,uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SwapResult"): EventFragment;
}

export interface SwapResultEventObject {
  _recipient: string;
  _tokenOut: string;
  _from: string;
  _amountOut: BigNumber;
  _success: number;
}
export type SwapResultEvent = TypedEvent<
  [string, string, string, BigNumber, number],
  SwapResultEventObject
>;

export type SwapResultEventFilter = TypedEventFilter<SwapResultEvent>;

export interface CrossChainSwapV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CrossChainSwapV2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CIRCLE_INTEGRATION(overrides?: CallOverrides): Promise<[string]>;

    SWAP_ROUTER(overrides?: CallOverrides): Promise<[string]>;

    USDC_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    WORMHOLE(overrides?: CallOverrides): Promise<[string]>;

    WRAPPED_NATIVE_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    decodeSwapInParameters(
      encoded: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [SwapHelper.RecvSwapInParametersStructOutput] & {
        params: SwapHelper.RecvSwapInParametersStructOutput;
      }
    >;

    swapExactNativeInAndTransfer(
      swapParams: SwapHelper.ExactInParametersStruct,
      path: PromiseOrValue<string>[],
      relayerFee: PromiseOrValue<BigNumberish>,
      targetChainId: PromiseOrValue<BigNumberish>,
      targetContractAddress: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    recvAndSwapExactNativeIn(
      redeemParams: ICircleIntegration.RedeemParametersStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * `registerContract` serves to save trusted circle relayer contract addresses
     */
    registerContract(
      chainId: PromiseOrValue<BigNumberish>,
      contractAddress: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  CIRCLE_INTEGRATION(overrides?: CallOverrides): Promise<string>;

  SWAP_ROUTER(overrides?: CallOverrides): Promise<string>;

  USDC_ADDRESS(overrides?: CallOverrides): Promise<string>;

  WORMHOLE(overrides?: CallOverrides): Promise<string>;

  WRAPPED_NATIVE_ADDRESS(overrides?: CallOverrides): Promise<string>;

  decodeSwapInParameters(
    encoded: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<SwapHelper.RecvSwapInParametersStructOutput>;

  swapExactNativeInAndTransfer(
    swapParams: SwapHelper.ExactInParametersStruct,
    path: PromiseOrValue<string>[],
    relayerFee: PromiseOrValue<BigNumberish>,
    targetChainId: PromiseOrValue<BigNumberish>,
    targetContractAddress: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  recvAndSwapExactNativeIn(
    redeemParams: ICircleIntegration.RedeemParametersStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * `registerContract` serves to save trusted circle relayer contract addresses
   */
  registerContract(
    chainId: PromiseOrValue<BigNumberish>,
    contractAddress: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    CIRCLE_INTEGRATION(overrides?: CallOverrides): Promise<string>;

    SWAP_ROUTER(overrides?: CallOverrides): Promise<string>;

    USDC_ADDRESS(overrides?: CallOverrides): Promise<string>;

    WORMHOLE(overrides?: CallOverrides): Promise<string>;

    WRAPPED_NATIVE_ADDRESS(overrides?: CallOverrides): Promise<string>;

    decodeSwapInParameters(
      encoded: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<SwapHelper.RecvSwapInParametersStructOutput>;

    swapExactNativeInAndTransfer(
      swapParams: SwapHelper.ExactInParametersStruct,
      path: PromiseOrValue<string>[],
      relayerFee: PromiseOrValue<BigNumberish>,
      targetChainId: PromiseOrValue<BigNumberish>,
      targetContractAddress: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    recvAndSwapExactNativeIn(
      redeemParams: ICircleIntegration.RedeemParametersStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    /**
     * `registerContract` serves to save trusted circle relayer contract addresses
     */
    registerContract(
      chainId: PromiseOrValue<BigNumberish>,
      contractAddress: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "SwapResult(address,address,address,uint256,uint8)"(
      _recipient?: PromiseOrValue<string> | null,
      _tokenOut?: null,
      _from?: null,
      _amountOut?: null,
      _success?: null
    ): SwapResultEventFilter;
    SwapResult(
      _recipient?: PromiseOrValue<string> | null,
      _tokenOut?: null,
      _from?: null,
      _amountOut?: null,
      _success?: null
    ): SwapResultEventFilter;
  };

  estimateGas: {
    CIRCLE_INTEGRATION(overrides?: CallOverrides): Promise<BigNumber>;

    SWAP_ROUTER(overrides?: CallOverrides): Promise<BigNumber>;

    USDC_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    WORMHOLE(overrides?: CallOverrides): Promise<BigNumber>;

    WRAPPED_NATIVE_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    decodeSwapInParameters(
      encoded: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapExactNativeInAndTransfer(
      swapParams: SwapHelper.ExactInParametersStruct,
      path: PromiseOrValue<string>[],
      relayerFee: PromiseOrValue<BigNumberish>,
      targetChainId: PromiseOrValue<BigNumberish>,
      targetContractAddress: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    recvAndSwapExactNativeIn(
      redeemParams: ICircleIntegration.RedeemParametersStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * `registerContract` serves to save trusted circle relayer contract addresses
     */
    registerContract(
      chainId: PromiseOrValue<BigNumberish>,
      contractAddress: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CIRCLE_INTEGRATION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SWAP_ROUTER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    USDC_ADDRESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WORMHOLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WRAPPED_NATIVE_ADDRESS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decodeSwapInParameters(
      encoded: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapExactNativeInAndTransfer(
      swapParams: SwapHelper.ExactInParametersStruct,
      path: PromiseOrValue<string>[],
      relayerFee: PromiseOrValue<BigNumberish>,
      targetChainId: PromiseOrValue<BigNumberish>,
      targetContractAddress: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    recvAndSwapExactNativeIn(
      redeemParams: ICircleIntegration.RedeemParametersStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * `registerContract` serves to save trusted circle relayer contract addresses
     */
    registerContract(
      chainId: PromiseOrValue<BigNumberish>,
      contractAddress: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
