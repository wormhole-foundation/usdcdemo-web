{"version":3,"file":"8015bd09-8176e92e113aa9d8d359.js","mappings":"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","sources":["webpack://wormhole-usdc-demo/./node_modules/@solana/web3.js/lib/index.browser.esm.js"],"sourcesContent":["import { Buffer } from 'buffer';\nimport { sha512 } from '@noble/hashes/sha512';\nimport * as ed25519 from '@noble/ed25519';\nimport BN from 'bn.js';\nimport bs58 from 'bs58';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { serialize, deserialize, deserializeUnchecked } from 'borsh';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport { blob } from '@solana/buffer-layout';\nimport { toBigIntLE, toBufferLE } from 'bigint-buffer';\nimport { coerce, instance, string, tuple, literal, unknown, union, type, optional, any, number, array, nullable, create, boolean, record, assert as assert$1 } from 'superstruct';\nimport { Client } from 'rpc-websockets';\nimport RpcClient from 'jayson/lib/client/browser';\nimport { keccak_256 } from '@noble/hashes/sha3';\nimport { hmac } from '@noble/hashes/hmac';\nimport * as secp256k1 from '@noble/secp256k1';\n\n/**\n * A 64 byte secret key, the first 32 bytes of which is the\n * private scalar and the last 32 bytes is the public key.\n * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n */\n\ned25519.utils.sha512Sync = (...m) => sha512(ed25519.utils.concatBytes(...m));\n\nconst generatePrivateKey = ed25519.utils.randomPrivateKey;\nconst generateKeypair = () => {\n  const privateScalar = ed25519.utils.randomPrivateKey();\n  const publicKey = getPublicKey(privateScalar);\n  const secretKey = new Uint8Array(64);\n  secretKey.set(privateScalar);\n  secretKey.set(publicKey, 32);\n  return {\n    publicKey,\n    secretKey\n  };\n};\nconst getPublicKey = ed25519.sync.getPublicKey;\nfunction isOnCurve(publicKey) {\n  try {\n    ed25519.Point.fromHex(publicKey, true\n    /* strict */\n    );\n    return true;\n  } catch {\n    return false;\n  }\n}\nconst sign = (message, secretKey) => ed25519.sync.sign(message, secretKey.slice(0, 32));\nconst verify = ed25519.sync.verify;\n\nconst toBuffer = arr => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n\nclass Struct {\n  constructor(properties) {\n    Object.assign(this, properties);\n  }\n\n  encode() {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data) {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data) {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n\n} // Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\n\nclass Enum extends Struct {\n  constructor(properties) {\n    super(properties);\n    this.enum = '';\n\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n\n}\nconst SOLANA_SCHEMA = new Map();\n\n/**\n * Maximum length of derived pubkey seed\n */\n\nconst MAX_SEED_LENGTH = 32;\n/**\n * Size of public key in bytes\n */\n\nconst PUBLIC_KEY_LENGTH = 32;\n/**\n * Value to be converted into public key\n */\n\nfunction isPublicKeyData(value) {\n  return value._bn !== undefined;\n} // local counter used by PublicKey.unique()\n\n\nlet uniquePublicKeyCounter = 1;\n/**\n * A public key\n */\n\nclass PublicKey extends Struct {\n  /** @internal */\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value) {\n    super({});\n    this._bn = void 0;\n\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n\n        if (decoded.length != PUBLIC_KEY_LENGTH) {\n          throw new Error(`Invalid public key input`);\n        }\n\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > PUBLIC_KEY_LENGTH) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n  /**\n   * Returns a unique PublicKey for tests and benchmarks using a counter\n   */\n\n\n  static unique() {\n    const key = new PublicKey(uniquePublicKeyCounter);\n    uniquePublicKeyCounter += 1;\n    return new PublicKey(key.toBuffer());\n  }\n  /**\n   * Default public key value. The base58-encoded string representation is all ones (as seen below)\n   * The underlying BN number is 32 bytes that are all zeros\n   */\n\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey) {\n    return this._bn.eq(publicKey._bn);\n  }\n  /**\n   * Return the base-58 representation of the public key\n   */\n\n\n  toBase58() {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON() {\n    return this.toBase58();\n  }\n  /**\n   * Return the byte array representation of the public key\n   */\n\n\n  toBytes() {\n    return this.toBuffer();\n  }\n  /**\n   * Return the Buffer representation of the public key\n   */\n\n\n  toBuffer() {\n    const b = this._bn.toArrayLike(Buffer);\n\n    if (b.length === PUBLIC_KEY_LENGTH) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n  /**\n   * Return the base-58 representation of the public key\n   */\n\n\n  toString() {\n    return this.toBase58();\n  }\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n\n  /* eslint-disable require-await */\n\n\n  static async createWithSeed(fromPublicKey, seed, programId) {\n    const buffer = Buffer.concat([fromPublicKey.toBuffer(), Buffer.from(seed), programId.toBuffer()]);\n    const publicKeyBytes = sha256(buffer);\n    return new PublicKey(publicKeyBytes);\n  }\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n\n  /* eslint-disable require-await */\n\n\n  static createProgramAddressSync(seeds, programId) {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([buffer, programId.toBuffer(), Buffer.from('ProgramDerivedAddress')]);\n    const publicKeyBytes = sha256(buffer);\n\n    if (isOnCurve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n\n    return new PublicKey(publicKeyBytes);\n  }\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link createProgramAddressSync} instead\n   */\n\n  /* eslint-disable require-await */\n\n\n  static async createProgramAddress(seeds, programId) {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n\n\n  static findProgramAddressSync(seeds, programId) {\n    let nonce = 255;\n    let address;\n\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n\n        nonce--;\n        continue;\n      }\n\n      return [address, nonce];\n    }\n\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link findProgramAddressSync} instead\n   */\n\n\n  static async findProgramAddress(seeds, programId) {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n\n\n  static isOnCurve(pubkeyData) {\n    const pubkey = new PublicKey(pubkeyData);\n    return isOnCurve(pubkey.toBytes());\n  }\n\n}\nPublicKey.default = new PublicKey('11111111111111111111111111111111');\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']]\n});\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\n\nclass Account {\n  /** @internal */\n\n  /** @internal */\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey) {\n    this._publicKey = void 0;\n    this._secretKey = void 0;\n\n    if (secretKey) {\n      const secretKeyBuffer = toBuffer(secretKey);\n\n      if (secretKey.length !== 64) {\n        throw new Error('bad secret key size');\n      }\n\n      this._publicKey = secretKeyBuffer.slice(32, 64);\n      this._secretKey = secretKeyBuffer.slice(0, 32);\n    } else {\n      this._secretKey = toBuffer(generatePrivateKey());\n      this._publicKey = toBuffer(getPublicKey(this._secretKey));\n    }\n  }\n  /**\n   * The public key for this account\n   */\n\n\n  get publicKey() {\n    return new PublicKey(this._publicKey);\n  }\n  /**\n   * The **unencrypted** secret key for this account. The first 32 bytes\n   * is the private scalar and the last 32 bytes is the public key.\n   * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n   */\n\n\n  get secretKey() {\n    return Buffer.concat([this._secretKey, this._publicKey], 64);\n  }\n\n}\n\nconst BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey('BPFLoader1111111111111111111111111111111111');\n\n/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nconst PACKET_DATA_SIZE = 1280 - 40 - 8;\nconst VERSION_PREFIX_MASK = 0x7f;\nconst SIGNATURE_LENGTH_IN_BYTES = 64;\n\nclass TransactionExpiredBlockheightExceededError extends Error {\n  constructor(signature) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = void 0;\n    this.signature = signature;\n  }\n\n}\nObject.defineProperty(TransactionExpiredBlockheightExceededError.prototype, 'name', {\n  value: 'TransactionExpiredBlockheightExceededError'\n});\nclass TransactionExpiredTimeoutError extends Error {\n  constructor(signature, timeoutSeconds) {\n    super(`Transaction was not confirmed in ${timeoutSeconds.toFixed(2)} seconds. It is ` + 'unknown if it succeeded or failed. Check signature ' + `${signature} using the Solana Explorer or CLI tools.`);\n    this.signature = void 0;\n    this.signature = signature;\n  }\n\n}\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError'\n});\nclass TransactionExpiredNonceInvalidError extends Error {\n  constructor(signature) {\n    super(`Signature ${signature} has expired: the nonce is no longer valid.`);\n    this.signature = void 0;\n    this.signature = signature;\n  }\n\n}\nObject.defineProperty(TransactionExpiredNonceInvalidError.prototype, 'name', {\n  value: 'TransactionExpiredNonceInvalidError'\n});\n\nclass MessageAccountKeys {\n  constructor(staticAccountKeys, accountKeysFromLookups) {\n    this.staticAccountKeys = void 0;\n    this.accountKeysFromLookups = void 0;\n    this.staticAccountKeys = staticAccountKeys;\n    this.accountKeysFromLookups = accountKeysFromLookups;\n  }\n\n  keySegments() {\n    const keySegments = [this.staticAccountKeys];\n\n    if (this.accountKeysFromLookups) {\n      keySegments.push(this.accountKeysFromLookups.writable);\n      keySegments.push(this.accountKeysFromLookups.readonly);\n    }\n\n    return keySegments;\n  }\n\n  get(index) {\n    for (const keySegment of this.keySegments()) {\n      if (index < keySegment.length) {\n        return keySegment[index];\n      } else {\n        index -= keySegment.length;\n      }\n    }\n\n    return;\n  }\n\n  get length() {\n    return this.keySegments().flat().length;\n  }\n\n  compileInstructions(instructions) {\n    // Bail early if any account indexes would overflow a u8\n    const U8_MAX = 255;\n\n    if (this.length > U8_MAX + 1) {\n      throw new Error('Account index overflow encountered during compilation');\n    }\n\n    const keyIndexMap = new Map();\n    this.keySegments().flat().forEach((key, index) => {\n      keyIndexMap.set(key.toBase58(), index);\n    });\n\n    const findKeyIndex = key => {\n      const keyIndex = keyIndexMap.get(key.toBase58());\n      if (keyIndex === undefined) throw new Error('Encountered an unknown instruction account key during compilation');\n      return keyIndex;\n    };\n\n    return instructions.map(instruction => {\n      return {\n        programIdIndex: findKeyIndex(instruction.programId),\n        accountKeyIndexes: instruction.keys.map(meta => findKeyIndex(meta.pubkey)),\n        data: instruction.data\n      };\n    });\n  }\n\n}\n\n/**\n * Layout for a public key\n */\nconst publicKey = (property = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n/**\n * Layout for a signature\n */\n\nconst signature = (property = 'signature') => {\n  return BufferLayout.blob(64, property);\n};\n\n/**\n * Layout for a Rust String type\n */\nconst rustString = (property = 'string') => {\n  const rsl = BufferLayout.struct([BufferLayout.u32('length'), BufferLayout.u32('lengthPadding'), BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars')], property);\n\n  const _decode = rsl.decode.bind(rsl);\n\n  const _encode = rsl.encode.bind(rsl);\n\n  const rslShim = rsl;\n\n  rslShim.decode = (b, offset) => {\n    const data = _decode(b, offset);\n\n    return data['chars'].toString();\n  };\n\n  rslShim.encode = (str, b, offset) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8')\n    };\n    return _encode(data, b, offset);\n  };\n\n  rslShim.alloc = str => {\n    return BufferLayout.u32().span + BufferLayout.u32().span + Buffer.from(str, 'utf8').length;\n  };\n\n  return rslShim;\n};\n/**\n * Layout for an Authorized object\n */\n\nconst authorized = (property = 'authorized') => {\n  return BufferLayout.struct([publicKey('staker'), publicKey('withdrawer')], property);\n};\n/**\n * Layout for a Lockup object\n */\n\nconst lockup = (property = 'lockup') => {\n  return BufferLayout.struct([BufferLayout.ns64('unixTimestamp'), BufferLayout.ns64('epoch'), publicKey('custodian')], property);\n};\n/**\n *  Layout for a VoteInit object\n */\n\nconst voteInit = (property = 'voteInit') => {\n  return BufferLayout.struct([publicKey('nodePubkey'), publicKey('authorizedVoter'), publicKey('authorizedWithdrawer'), BufferLayout.u8('commission')], property);\n};\n/**\n *  Layout for a VoteAuthorizeWithSeedArgs object\n */\n\nconst voteAuthorizeWithSeedArgs = (property = 'voteAuthorizeWithSeedArgs') => {\n  return BufferLayout.struct([BufferLayout.u32('voteAuthorizationType'), publicKey('currentAuthorityDerivedKeyOwnerPubkey'), rustString('currentAuthorityDerivedKeySeed'), publicKey('newAuthorized')], property);\n};\nfunction getAlloc(type, fields) {\n  const getItemAlloc = item => {\n    if (item.span >= 0) {\n      return item.span;\n    } else if (typeof item.alloc === 'function') {\n      return item.alloc(fields[item.property]);\n    } else if ('count' in item && 'elementLayout' in item) {\n      const field = fields[item.property];\n\n      if (Array.isArray(field)) {\n        return field.length * getItemAlloc(item.elementLayout);\n      }\n    } else if ('fields' in item) {\n      // This is a `Structure` whose size needs to be recursively measured.\n      return getAlloc({\n        layout: item\n      }, fields[item.property]);\n    } // Couldn't determine allocated size of layout\n\n\n    return 0;\n  };\n\n  let alloc = 0;\n  type.layout.fields.forEach(item => {\n    alloc += getItemAlloc(item);\n  });\n  return alloc;\n}\n\nfunction decodeLength(bytes) {\n  let len = 0;\n  let size = 0;\n\n  for (;;) {\n    let elem = bytes.shift();\n    len |= (elem & 0x7f) << size * 7;\n    size += 1;\n\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n\n  return len;\n}\nfunction encodeLength(bytes, len) {\n  let rem_len = len;\n\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n\nfunction assert (condition, message) {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n\nclass CompiledKeys {\n  constructor(payer, keyMetaMap) {\n    this.payer = void 0;\n    this.keyMetaMap = void 0;\n    this.payer = payer;\n    this.keyMetaMap = keyMetaMap;\n  }\n\n  static compile(instructions, payer) {\n    const keyMetaMap = new Map();\n\n    const getOrInsertDefault = pubkey => {\n      const address = pubkey.toBase58();\n      let keyMeta = keyMetaMap.get(address);\n\n      if (keyMeta === undefined) {\n        keyMeta = {\n          isSigner: false,\n          isWritable: false,\n          isInvoked: false\n        };\n        keyMetaMap.set(address, keyMeta);\n      }\n\n      return keyMeta;\n    };\n\n    const payerKeyMeta = getOrInsertDefault(payer);\n    payerKeyMeta.isSigner = true;\n    payerKeyMeta.isWritable = true;\n\n    for (const ix of instructions) {\n      getOrInsertDefault(ix.programId).isInvoked = true;\n\n      for (const accountMeta of ix.keys) {\n        const keyMeta = getOrInsertDefault(accountMeta.pubkey);\n        keyMeta.isSigner || (keyMeta.isSigner = accountMeta.isSigner);\n        keyMeta.isWritable || (keyMeta.isWritable = accountMeta.isWritable);\n      }\n    }\n\n    return new CompiledKeys(payer, keyMetaMap);\n  }\n\n  getMessageComponents() {\n    const mapEntries = [...this.keyMetaMap.entries()];\n    assert(mapEntries.length <= 256, 'Max static account keys length exceeded');\n    const writableSigners = mapEntries.filter(([, meta]) => meta.isSigner && meta.isWritable);\n    const readonlySigners = mapEntries.filter(([, meta]) => meta.isSigner && !meta.isWritable);\n    const writableNonSigners = mapEntries.filter(([, meta]) => !meta.isSigner && meta.isWritable);\n    const readonlyNonSigners = mapEntries.filter(([, meta]) => !meta.isSigner && !meta.isWritable);\n    const header = {\n      numRequiredSignatures: writableSigners.length + readonlySigners.length,\n      numReadonlySignedAccounts: readonlySigners.length,\n      numReadonlyUnsignedAccounts: readonlyNonSigners.length\n    }; // sanity checks\n\n    {\n      assert(writableSigners.length > 0, 'Expected at least one writable signer key');\n      const [payerAddress] = writableSigners[0];\n      assert(payerAddress === this.payer.toBase58(), 'Expected first writable signer key to be the fee payer');\n    }\n    const staticAccountKeys = [...writableSigners.map(([address]) => new PublicKey(address)), ...readonlySigners.map(([address]) => new PublicKey(address)), ...writableNonSigners.map(([address]) => new PublicKey(address)), ...readonlyNonSigners.map(([address]) => new PublicKey(address))];\n    return [header, staticAccountKeys];\n  }\n\n  extractTableLookup(lookupTable) {\n    const [writableIndexes, drainedWritableKeys] = this.drainKeysFoundInLookupTable(lookupTable.state.addresses, keyMeta => !keyMeta.isSigner && !keyMeta.isInvoked && keyMeta.isWritable);\n    const [readonlyIndexes, drainedReadonlyKeys] = this.drainKeysFoundInLookupTable(lookupTable.state.addresses, keyMeta => !keyMeta.isSigner && !keyMeta.isInvoked && !keyMeta.isWritable); // Don't extract lookup if no keys were found\n\n    if (writableIndexes.length === 0 && readonlyIndexes.length === 0) {\n      return;\n    }\n\n    return [{\n      accountKey: lookupTable.key,\n      writableIndexes,\n      readonlyIndexes\n    }, {\n      writable: drainedWritableKeys,\n      readonly: drainedReadonlyKeys\n    }];\n  }\n  /** @internal */\n\n\n  drainKeysFoundInLookupTable(lookupTableEntries, keyMetaFilter) {\n    const lookupTableIndexes = new Array();\n    const drainedKeys = new Array();\n\n    for (const [address, keyMeta] of this.keyMetaMap.entries()) {\n      if (keyMetaFilter(keyMeta)) {\n        const key = new PublicKey(address);\n        const lookupTableIndex = lookupTableEntries.findIndex(entry => entry.equals(key));\n\n        if (lookupTableIndex >= 0) {\n          assert(lookupTableIndex < 256, 'Max lookup table index exceeded');\n          lookupTableIndexes.push(lookupTableIndex);\n          drainedKeys.push(key);\n          this.keyMetaMap.delete(address);\n        }\n      }\n    }\n\n    return [lookupTableIndexes, drainedKeys];\n  }\n\n}\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\n\n/**\n * List of instructions to be processed atomically\n */\nclass Message {\n  constructor(args) {\n    this.header = void 0;\n    this.accountKeys = void 0;\n    this.recentBlockhash = void 0;\n    this.instructions = void 0;\n    this.indexToProgramIds = new Map();\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix => this.indexToProgramIds.set(ix.programIdIndex, this.accountKeys[ix.programIdIndex]));\n  }\n\n  get version() {\n    return 'legacy';\n  }\n\n  get staticAccountKeys() {\n    return this.accountKeys;\n  }\n\n  get compiledInstructions() {\n    return this.instructions.map(ix => ({\n      programIdIndex: ix.programIdIndex,\n      accountKeyIndexes: ix.accounts,\n      data: bs58.decode(ix.data)\n    }));\n  }\n\n  get addressTableLookups() {\n    return [];\n  }\n\n  getAccountKeys() {\n    return new MessageAccountKeys(this.staticAccountKeys);\n  }\n\n  static compile(args) {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys);\n    const instructions = accountKeys.compileInstructions(args.instructions).map(ix => ({\n      programIdIndex: ix.programIdIndex,\n      accounts: ix.accountKeyIndexes,\n      data: bs58.encode(ix.data)\n    }));\n    return new Message({\n      header,\n      accountKeys: staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      instructions\n    });\n  }\n\n  isAccountSigner(index) {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index) {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n\n    if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = this.accountKeys.length - numSignedAccounts;\n      const numWritableUnsignedAccounts = numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts = numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  isProgramId(index) {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds() {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds() {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize() {\n    const numKeys = this.accountKeys.length;\n    let keyCount = [];\n    encodeLength(keyCount, numKeys);\n    const instructions = this.instructions.map(instruction => {\n      const {\n        accounts,\n        programIdIndex\n      } = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n      let keyIndicesCount = [];\n      encodeLength(keyIndicesCount, accounts.length);\n      let dataCount = [];\n      encodeLength(dataCount, data.length);\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data\n      };\n    });\n    let instructionCount = [];\n    encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct([BufferLayout.u8('programIdIndex'), BufferLayout.blob(instruction.keyIndicesCount.length, 'keyIndicesCount'), BufferLayout.seq(BufferLayout.u8('keyIndex'), instruction.keyIndices.length, 'keyIndices'), BufferLayout.blob(instruction.dataLength.length, 'dataLength'), BufferLayout.seq(BufferLayout.u8('userdatum'), instruction.data.length, 'data')]);\n      const length = instructionLayout.encode(instruction, instructionBuffer, instructionBufferLength);\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n    const signDataLayout = BufferLayout.struct([BufferLayout.blob(1, 'numRequiredSignatures'), BufferLayout.blob(1, 'numReadonlySignedAccounts'), BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'), BufferLayout.blob(keyCount.length, 'keyCount'), BufferLayout.seq(publicKey('key'), numKeys, 'keys'), publicKey('recentBlockhash')]);\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([this.header.numReadonlySignedAccounts]),\n      numReadonlyUnsignedAccounts: Buffer.from([this.header.numReadonlyUnsignedAccounts]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash)\n    };\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n  /**\n   * Decode a compiled message into a Message object.\n   */\n\n\n  static from(buffer) {\n    // Slice up wire data\n    let byteArray = [...buffer];\n    const numRequiredSignatures = byteArray.shift();\n\n    if (numRequiredSignatures !== (numRequiredSignatures & VERSION_PREFIX_MASK)) {\n      throw new Error('Versioned messages must be deserialized with VersionedMessage.deserialize()');\n    }\n\n    const numReadonlySignedAccounts = byteArray.shift();\n    const numReadonlyUnsignedAccounts = byteArray.shift();\n    const accountCount = decodeLength(byteArray);\n    let accountKeys = [];\n\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      accountKeys.push(new PublicKey(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n    byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n    const instructionCount = decodeLength(byteArray);\n    let instructions = [];\n\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift();\n      const accountCount = decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions\n    };\n    return new Message(messageArgs);\n  }\n\n}\n\n/**\n * Message constructor arguments\n */\n\nclass MessageV0 {\n  constructor(args) {\n    this.header = void 0;\n    this.staticAccountKeys = void 0;\n    this.recentBlockhash = void 0;\n    this.compiledInstructions = void 0;\n    this.addressTableLookups = void 0;\n    this.header = args.header;\n    this.staticAccountKeys = args.staticAccountKeys;\n    this.recentBlockhash = args.recentBlockhash;\n    this.compiledInstructions = args.compiledInstructions;\n    this.addressTableLookups = args.addressTableLookups;\n  }\n\n  get version() {\n    return 0;\n  }\n\n  get numAccountKeysFromLookups() {\n    let count = 0;\n\n    for (const lookup of this.addressTableLookups) {\n      count += lookup.readonlyIndexes.length + lookup.writableIndexes.length;\n    }\n\n    return count;\n  }\n\n  getAccountKeys(args) {\n    let accountKeysFromLookups;\n\n    if (args && 'accountKeysFromLookups' in args && args.accountKeysFromLookups) {\n      if (this.numAccountKeysFromLookups != args.accountKeysFromLookups.writable.length + args.accountKeysFromLookups.readonly.length) {\n        throw new Error('Failed to get account keys because of a mismatch in the number of account keys from lookups');\n      }\n\n      accountKeysFromLookups = args.accountKeysFromLookups;\n    } else if (args && 'addressLookupTableAccounts' in args && args.addressLookupTableAccounts) {\n      accountKeysFromLookups = this.resolveAddressTableLookups(args.addressLookupTableAccounts);\n    } else if (this.addressTableLookups.length > 0) {\n      throw new Error('Failed to get account keys because address table lookups were not resolved');\n    }\n\n    return new MessageAccountKeys(this.staticAccountKeys, accountKeysFromLookups);\n  }\n\n  isAccountSigner(index) {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index) {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    const numStaticAccountKeys = this.staticAccountKeys.length;\n\n    if (index >= numStaticAccountKeys) {\n      const lookupAccountKeysIndex = index - numStaticAccountKeys;\n      const numWritableLookupAccountKeys = this.addressTableLookups.reduce((count, lookup) => count + lookup.writableIndexes.length, 0);\n      return lookupAccountKeysIndex < numWritableLookupAccountKeys;\n    } else if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = numStaticAccountKeys - numSignedAccounts;\n      const numWritableUnsignedAccounts = numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts = numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  resolveAddressTableLookups(addressLookupTableAccounts) {\n    const accountKeysFromLookups = {\n      writable: [],\n      readonly: []\n    };\n\n    for (const tableLookup of this.addressTableLookups) {\n      const tableAccount = addressLookupTableAccounts.find(account => account.key.equals(tableLookup.accountKey));\n\n      if (!tableAccount) {\n        throw new Error(`Failed to find address lookup table account for table key ${tableLookup.accountKey.toBase58()}`);\n      }\n\n      for (const index of tableLookup.writableIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.writable.push(tableAccount.state.addresses[index]);\n        } else {\n          throw new Error(`Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`);\n        }\n      }\n\n      for (const index of tableLookup.readonlyIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.readonly.push(tableAccount.state.addresses[index]);\n        } else {\n          throw new Error(`Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`);\n        }\n      }\n    }\n\n    return accountKeysFromLookups;\n  }\n\n  static compile(args) {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const addressTableLookups = new Array();\n    const accountKeysFromLookups = {\n      writable: new Array(),\n      readonly: new Array()\n    };\n    const lookupTableAccounts = args.addressLookupTableAccounts || [];\n\n    for (const lookupTable of lookupTableAccounts) {\n      const extractResult = compiledKeys.extractTableLookup(lookupTable);\n\n      if (extractResult !== undefined) {\n        const [addressTableLookup, {\n          writable,\n          readonly\n        }] = extractResult;\n        addressTableLookups.push(addressTableLookup);\n        accountKeysFromLookups.writable.push(...writable);\n        accountKeysFromLookups.readonly.push(...readonly);\n      }\n    }\n\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys, accountKeysFromLookups);\n    const compiledInstructions = accountKeys.compileInstructions(args.instructions);\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      compiledInstructions,\n      addressTableLookups\n    });\n  }\n\n  serialize() {\n    const encodedStaticAccountKeysLength = Array();\n    encodeLength(encodedStaticAccountKeysLength, this.staticAccountKeys.length);\n    const serializedInstructions = this.serializeInstructions();\n    const encodedInstructionsLength = Array();\n    encodeLength(encodedInstructionsLength, this.compiledInstructions.length);\n    const serializedAddressTableLookups = this.serializeAddressTableLookups();\n    const encodedAddressTableLookupsLength = Array();\n    encodeLength(encodedAddressTableLookupsLength, this.addressTableLookups.length);\n    const messageLayout = BufferLayout.struct([BufferLayout.u8('prefix'), BufferLayout.struct([BufferLayout.u8('numRequiredSignatures'), BufferLayout.u8('numReadonlySignedAccounts'), BufferLayout.u8('numReadonlyUnsignedAccounts')], 'header'), BufferLayout.blob(encodedStaticAccountKeysLength.length, 'staticAccountKeysLength'), BufferLayout.seq(publicKey(), this.staticAccountKeys.length, 'staticAccountKeys'), publicKey('recentBlockhash'), BufferLayout.blob(encodedInstructionsLength.length, 'instructionsLength'), BufferLayout.blob(serializedInstructions.length, 'serializedInstructions'), BufferLayout.blob(encodedAddressTableLookupsLength.length, 'addressTableLookupsLength'), BufferLayout.blob(serializedAddressTableLookups.length, 'serializedAddressTableLookups')]);\n    const serializedMessage = new Uint8Array(PACKET_DATA_SIZE);\n    const MESSAGE_VERSION_0_PREFIX = 1 << 7;\n    const serializedMessageLength = messageLayout.encode({\n      prefix: MESSAGE_VERSION_0_PREFIX,\n      header: this.header,\n      staticAccountKeysLength: new Uint8Array(encodedStaticAccountKeysLength),\n      staticAccountKeys: this.staticAccountKeys.map(key => key.toBytes()),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n      instructionsLength: new Uint8Array(encodedInstructionsLength),\n      serializedInstructions,\n      addressTableLookupsLength: new Uint8Array(encodedAddressTableLookupsLength),\n      serializedAddressTableLookups\n    }, serializedMessage);\n    return serializedMessage.slice(0, serializedMessageLength);\n  }\n\n  serializeInstructions() {\n    let serializedLength = 0;\n    const serializedInstructions = new Uint8Array(PACKET_DATA_SIZE);\n\n    for (const instruction of this.compiledInstructions) {\n      const encodedAccountKeyIndexesLength = Array();\n      encodeLength(encodedAccountKeyIndexesLength, instruction.accountKeyIndexes.length);\n      const encodedDataLength = Array();\n      encodeLength(encodedDataLength, instruction.data.length);\n      const instructionLayout = BufferLayout.struct([BufferLayout.u8('programIdIndex'), BufferLayout.blob(encodedAccountKeyIndexesLength.length, 'encodedAccountKeyIndexesLength'), BufferLayout.seq(BufferLayout.u8(), instruction.accountKeyIndexes.length, 'accountKeyIndexes'), BufferLayout.blob(encodedDataLength.length, 'encodedDataLength'), BufferLayout.blob(instruction.data.length, 'data')]);\n      serializedLength += instructionLayout.encode({\n        programIdIndex: instruction.programIdIndex,\n        encodedAccountKeyIndexesLength: new Uint8Array(encodedAccountKeyIndexesLength),\n        accountKeyIndexes: instruction.accountKeyIndexes,\n        encodedDataLength: new Uint8Array(encodedDataLength),\n        data: instruction.data\n      }, serializedInstructions, serializedLength);\n    }\n\n    return serializedInstructions.slice(0, serializedLength);\n  }\n\n  serializeAddressTableLookups() {\n    let serializedLength = 0;\n    const serializedAddressTableLookups = new Uint8Array(PACKET_DATA_SIZE);\n\n    for (const lookup of this.addressTableLookups) {\n      const encodedWritableIndexesLength = Array();\n      encodeLength(encodedWritableIndexesLength, lookup.writableIndexes.length);\n      const encodedReadonlyIndexesLength = Array();\n      encodeLength(encodedReadonlyIndexesLength, lookup.readonlyIndexes.length);\n      const addressTableLookupLayout = BufferLayout.struct([publicKey('accountKey'), BufferLayout.blob(encodedWritableIndexesLength.length, 'encodedWritableIndexesLength'), BufferLayout.seq(BufferLayout.u8(), lookup.writableIndexes.length, 'writableIndexes'), BufferLayout.blob(encodedReadonlyIndexesLength.length, 'encodedReadonlyIndexesLength'), BufferLayout.seq(BufferLayout.u8(), lookup.readonlyIndexes.length, 'readonlyIndexes')]);\n      serializedLength += addressTableLookupLayout.encode({\n        accountKey: lookup.accountKey.toBytes(),\n        encodedWritableIndexesLength: new Uint8Array(encodedWritableIndexesLength),\n        writableIndexes: lookup.writableIndexes,\n        encodedReadonlyIndexesLength: new Uint8Array(encodedReadonlyIndexesLength),\n        readonlyIndexes: lookup.readonlyIndexes\n      }, serializedAddressTableLookups, serializedLength);\n    }\n\n    return serializedAddressTableLookups.slice(0, serializedLength);\n  }\n\n  static deserialize(serializedMessage) {\n    let byteArray = [...serializedMessage];\n    const prefix = byteArray.shift();\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n    assert(prefix !== maskedPrefix, `Expected versioned message but received legacy message`);\n    const version = maskedPrefix;\n    assert(version === 0, `Expected versioned message with version 0 but found version ${version}`);\n    const header = {\n      numRequiredSignatures: byteArray.shift(),\n      numReadonlySignedAccounts: byteArray.shift(),\n      numReadonlyUnsignedAccounts: byteArray.shift()\n    };\n    const staticAccountKeys = [];\n    const staticAccountKeysLength = decodeLength(byteArray);\n\n    for (let i = 0; i < staticAccountKeysLength; i++) {\n      staticAccountKeys.push(new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH)));\n    }\n\n    const recentBlockhash = bs58.encode(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n    const instructionCount = decodeLength(byteArray);\n    const compiledInstructions = [];\n\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift();\n      const accountKeyIndexesLength = decodeLength(byteArray);\n      const accountKeyIndexes = byteArray.splice(0, accountKeyIndexesLength);\n      const dataLength = decodeLength(byteArray);\n      const data = new Uint8Array(byteArray.splice(0, dataLength));\n      compiledInstructions.push({\n        programIdIndex,\n        accountKeyIndexes,\n        data\n      });\n    }\n\n    const addressTableLookupsCount = decodeLength(byteArray);\n    const addressTableLookups = [];\n\n    for (let i = 0; i < addressTableLookupsCount; i++) {\n      const accountKey = new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n      const writableIndexesLength = decodeLength(byteArray);\n      const writableIndexes = byteArray.splice(0, writableIndexesLength);\n      const readonlyIndexesLength = decodeLength(byteArray);\n      const readonlyIndexes = byteArray.splice(0, readonlyIndexesLength);\n      addressTableLookups.push({\n        accountKey,\n        writableIndexes,\n        readonlyIndexes\n      });\n    }\n\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash,\n      compiledInstructions,\n      addressTableLookups\n    });\n  }\n\n}\n\n// eslint-disable-next-line no-redeclare\nconst VersionedMessage = {\n  deserializeMessageVersion(serializedMessage) {\n    const prefix = serializedMessage[0];\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK; // if the highest bit of the prefix is not set, the message is not versioned\n\n    if (maskedPrefix === prefix) {\n      return 'legacy';\n    } // the lower 7 bits of the prefix indicate the message version\n\n\n    return maskedPrefix;\n  },\n\n  deserialize: serializedMessage => {\n    const version = VersionedMessage.deserializeMessageVersion(serializedMessage);\n\n    if (version === 'legacy') {\n      return Message.from(serializedMessage);\n    }\n\n    if (version === 0) {\n      return MessageV0.deserialize(serializedMessage);\n    } else {\n      throw new Error(`Transaction message version ${version} deserialization is not supported`);\n    }\n  }\n};\n\n/**\n * Transaction signature as base-58 encoded string\n */\n\nlet TransactionStatus;\n/**\n * Default (empty) signature\n */\n\n(function (TransactionStatus) {\n  TransactionStatus[TransactionStatus[\"BLOCKHEIGHT_EXCEEDED\"] = 0] = \"BLOCKHEIGHT_EXCEEDED\";\n  TransactionStatus[TransactionStatus[\"PROCESSED\"] = 1] = \"PROCESSED\";\n  TransactionStatus[TransactionStatus[\"TIMED_OUT\"] = 2] = \"TIMED_OUT\";\n  TransactionStatus[TransactionStatus[\"NONCE_INVALID\"] = 3] = \"NONCE_INVALID\";\n})(TransactionStatus || (TransactionStatus = {}));\n\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n/**\n * Account metadata used to define instructions\n */\n\n/**\n * Transaction Instruction class\n */\nclass TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n\n  /**\n   * Program Id to execute\n   */\n\n  /**\n   * Program input\n   */\n  constructor(opts) {\n    this.keys = void 0;\n    this.programId = void 0;\n    this.data = Buffer.alloc(0);\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  toJSON() {\n    return {\n      keys: this.keys.map(({\n        pubkey,\n        isSigner,\n        isWritable\n      }) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data]\n    };\n  }\n\n}\n/**\n * Pair of signature and corresponding public key\n */\n\n/**\n * Transaction class\n */\nclass Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature() {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n\n    return null;\n  }\n  /**\n   * The transaction fee payer\n   */\n\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(opts) {\n    this.signatures = [];\n    this.feePayer = void 0;\n    this.instructions = [];\n    this.recentBlockhash = void 0;\n    this.lastValidBlockHeight = void 0;\n    this.nonceInfo = void 0;\n    this.minNonceContextSlot = void 0;\n    this._message = void 0;\n    this._json = void 0;\n\n    if (!opts) {\n      return;\n    }\n\n    if (opts.feePayer) {\n      this.feePayer = opts.feePayer;\n    }\n\n    if (opts.signatures) {\n      this.signatures = opts.signatures;\n    }\n\n    if (Object.prototype.hasOwnProperty.call(opts, 'nonceInfo')) {\n      const {\n        minContextSlot,\n        nonceInfo\n      } = opts;\n      this.minNonceContextSlot = minContextSlot;\n      this.nonceInfo = nonceInfo;\n    } else if (Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')) {\n      const {\n        blockhash,\n        lastValidBlockHeight\n      } = opts;\n      this.recentBlockhash = blockhash;\n      this.lastValidBlockHeight = lastValidBlockHeight;\n    } else {\n      const {\n        recentBlockhash,\n        nonceInfo\n      } = opts;\n\n      if (nonceInfo) {\n        this.nonceInfo = nonceInfo;\n      }\n\n      this.recentBlockhash = recentBlockhash;\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  toJSON() {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo ? {\n        nonce: this.nonceInfo.nonce,\n        nonceInstruction: this.nonceInfo.nonceInstruction.toJSON()\n      } : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(({\n        publicKey\n      }) => {\n        return publicKey.toJSON();\n      })\n    };\n  }\n  /**\n   * Add one or more instructions to this Transaction\n   */\n\n\n  add(...items) {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach(item => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n  /**\n   * Compile transaction data\n   */\n\n\n  compileMessage() {\n    if (this._message && JSON.stringify(this.toJSON()) === JSON.stringify(this._json)) {\n      return this._message;\n    }\n\n    let recentBlockhash;\n    let instructions;\n\n    if (this.nonceInfo) {\n      recentBlockhash = this.nonceInfo.nonce;\n\n      if (this.instructions[0] != this.nonceInfo.nonceInstruction) {\n        instructions = [this.nonceInfo.nonceInstruction, ...this.instructions];\n      } else {\n        instructions = this.instructions;\n      }\n    } else {\n      recentBlockhash = this.recentBlockhash;\n      instructions = this.instructions;\n    }\n\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer;\n\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < instructions.length; i++) {\n      if (instructions[i].programId === undefined) {\n        throw new Error(`Transaction instruction index ${i} has undefined program id`);\n      }\n    }\n\n    const programIds = [];\n    const accountMetas = [];\n    instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({ ...accountMeta\n        });\n      });\n      const programId = instruction.programId.toString();\n\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    }); // Append programID account metas\n\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false\n      });\n    }); // Cull duplicate account metas\n\n    const uniqueMetas = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable = uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner = uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    }); // Sort. Prioritizing first by signer, then by writable\n\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      } // Otherwise, sort by pubkey, stringwise.\n\n\n      return x.pubkey.toBase58().localeCompare(y.pubkey.toBase58());\n    }); // Move fee payer to the front\n\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true\n      });\n    } // Disallow unknown signers\n\n\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn('Transaction references a signature that is unnecessary, ' + 'only the fee payer and instruction signer accounts should sign a transaction. ' + 'This behavior is deprecated and will throw an error in the next major version release.');\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0; // Split out signing from non-signing keys and count header values\n\n    const signedKeys = [];\n    const unsignedKeys = [];\n    uniqueMetas.forEach(({\n      pubkey,\n      isSigner,\n      isWritable\n    }) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const compiledInstructions = instructions.map(instruction => {\n      const {\n        data,\n        programId\n      } = instruction;\n      return {\n        programIdIndex: accountKeys.indexOf(programId.toString()),\n        accounts: instruction.keys.map(meta => accountKeys.indexOf(meta.pubkey.toString())),\n        data: bs58.encode(data)\n      };\n    });\n    compiledInstructions.forEach(instruction => {\n      assert(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => assert(keyIndex >= 0));\n    });\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions: compiledInstructions\n    });\n  }\n  /**\n   * @internal\n   */\n\n\n  _compile() {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(0, message.header.numRequiredSignatures);\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey\n    }));\n    return message;\n  }\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n\n\n  serializeMessage() {\n    return this._compile().serialize();\n  }\n  /**\n   * Get the estimated fee associated with a transaction\n   */\n\n\n  async getEstimatedFee(connection) {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n\n\n  setSigners(...signers) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers.filter(publicKey => {\n      const key = publicKey.toString();\n\n      if (seen.has(key)) {\n        return false;\n      } else {\n        seen.add(key);\n        return true;\n      }\n    }).map(publicKey => ({\n      signature: null,\n      publicKey\n    }));\n  }\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n\n\n  sign(...signers) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    } // Dedupe signers\n\n\n    const seen = new Set();\n    const uniqueSigners = [];\n\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey\n    }));\n\n    const message = this._compile();\n\n    this._partialSign(message, ...uniqueSigners);\n  }\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n\n\n  partialSign(...signers) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    } // Dedupe signers\n\n\n    const seen = new Set();\n    const uniqueSigners = [];\n\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n\n    this._partialSign(message, ...uniqueSigners);\n  }\n  /**\n   * @internal\n   */\n\n\n  _partialSign(message, ...signers) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = sign(signData, signer.secretKey);\n\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n\n\n  addSignature(pubkey, signature) {\n    this._compile(); // Ensure signatures array is populated\n\n\n    this._addSignature(pubkey, signature);\n  }\n  /**\n   * @internal\n   */\n\n\n  _addSignature(pubkey, signature) {\n    assert(signature.length === 64);\n    const index = this.signatures.findIndex(sigpair => pubkey.equals(sigpair.publicKey));\n\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n  /**\n   * Verify signatures of a complete, signed Transaction\n   */\n\n\n  verifySignatures() {\n    return this._verifySignatures(this.serializeMessage(), true);\n  }\n  /**\n   * @internal\n   */\n\n\n  _verifySignatures(signData, requireAllSignatures) {\n    for (const {\n      signature,\n      publicKey\n    } of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (!verify(signature, signData, publicKey.toBytes())) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n\n\n  serialize(config) {\n    const {\n      requireAllSignatures,\n      verifySignatures\n    } = Object.assign({\n      requireAllSignatures: true,\n      verifySignatures: true\n    }, config);\n    const signData = this.serializeMessage();\n\n    if (verifySignatures && !this._verifySignatures(signData, requireAllSignatures)) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n  /**\n   * @internal\n   */\n\n\n  _serialize(signData) {\n    const {\n      signatures\n    } = this;\n    const signatureCount = [];\n    encodeLength(signatureCount, signatures.length);\n    const transactionLength = signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    assert(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({\n      signature\n    }, index) => {\n      if (signature !== null) {\n        assert(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(wireTransaction, signatureCount.length + index * 64);\n      }\n    });\n    signData.copy(wireTransaction, signatureCount.length + signatures.length * 64);\n    assert(wireTransaction.length <= PACKET_DATA_SIZE, `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`);\n    return wireTransaction;\n  }\n  /**\n   * Deprecated method\n   * @internal\n   */\n\n\n  get keys() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n  /**\n   * Deprecated method\n   * @internal\n   */\n\n\n  get programId() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n  /**\n   * Deprecated method\n   * @internal\n   */\n\n\n  get data() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n\n\n  static from(buffer) {\n    // Slice up wire data\n    let byteArray = [...buffer];\n    const signatureCount = decodeLength(byteArray);\n    let signatures = [];\n\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH_IN_BYTES);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n  /**\n   * Populate Transaction object from message and signatures\n   */\n\n\n  static populate(message, signatures = []) {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature: signature == bs58.encode(DEFAULT_SIGNATURE) ? null : bs58.decode(signature),\n        publicKey: message.accountKeys[index]\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner: transaction.signatures.some(keyObj => keyObj.publicKey.toString() === pubkey.toString()) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account)\n        };\n      });\n      transaction.instructions.push(new TransactionInstruction({\n        keys,\n        programId: message.accountKeys[instruction.programIdIndex],\n        data: bs58.decode(instruction.data)\n      }));\n    });\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n    return transaction;\n  }\n\n}\n\nclass TransactionMessage {\n  constructor(args) {\n    this.payerKey = void 0;\n    this.instructions = void 0;\n    this.recentBlockhash = void 0;\n    this.payerKey = args.payerKey;\n    this.instructions = args.instructions;\n    this.recentBlockhash = args.recentBlockhash;\n  }\n\n  static decompile(message, args) {\n    const {\n      header,\n      compiledInstructions,\n      recentBlockhash\n    } = message;\n    const {\n      numRequiredSignatures,\n      numReadonlySignedAccounts,\n      numReadonlyUnsignedAccounts\n    } = header;\n    const numWritableSignedAccounts = numRequiredSignatures - numReadonlySignedAccounts;\n    assert(numWritableSignedAccounts > 0, 'Message header is invalid');\n    const numWritableUnsignedAccounts = message.staticAccountKeys.length - numRequiredSignatures - numReadonlyUnsignedAccounts;\n    assert(numWritableUnsignedAccounts >= 0, 'Message header is invalid');\n    const accountKeys = message.getAccountKeys(args);\n    const payerKey = accountKeys.get(0);\n\n    if (payerKey === undefined) {\n      throw new Error('Failed to decompile message because no account keys were found');\n    }\n\n    const instructions = [];\n\n    for (const compiledIx of compiledInstructions) {\n      const keys = [];\n\n      for (const keyIndex of compiledIx.accountKeyIndexes) {\n        const pubkey = accountKeys.get(keyIndex);\n\n        if (pubkey === undefined) {\n          throw new Error(`Failed to find key for account key index ${keyIndex}`);\n        }\n\n        const isSigner = keyIndex < numRequiredSignatures;\n        let isWritable;\n\n        if (isSigner) {\n          isWritable = keyIndex < numWritableSignedAccounts;\n        } else if (keyIndex < accountKeys.staticAccountKeys.length) {\n          isWritable = keyIndex - numRequiredSignatures < numWritableUnsignedAccounts;\n        } else {\n          isWritable = keyIndex - accountKeys.staticAccountKeys.length < // accountKeysFromLookups cannot be undefined because we already found a pubkey for this index above\n          accountKeys.accountKeysFromLookups.writable.length;\n        }\n\n        keys.push({\n          pubkey,\n          isSigner: keyIndex < header.numRequiredSignatures,\n          isWritable\n        });\n      }\n\n      const programId = accountKeys.get(compiledIx.programIdIndex);\n\n      if (programId === undefined) {\n        throw new Error(`Failed to find program id for program id index ${compiledIx.programIdIndex}`);\n      }\n\n      instructions.push(new TransactionInstruction({\n        programId,\n        data: toBuffer(compiledIx.data),\n        keys\n      }));\n    }\n\n    return new TransactionMessage({\n      payerKey,\n      instructions,\n      recentBlockhash\n    });\n  }\n\n  compileToLegacyMessage() {\n    return Message.compile({\n      payerKey: this.payerKey,\n      recentBlockhash: this.recentBlockhash,\n      instructions: this.instructions\n    });\n  }\n\n  compileToV0Message(addressLookupTableAccounts) {\n    return MessageV0.compile({\n      payerKey: this.payerKey,\n      recentBlockhash: this.recentBlockhash,\n      instructions: this.instructions,\n      addressLookupTableAccounts\n    });\n  }\n\n}\n\n/**\n * Versioned transaction class\n */\nclass VersionedTransaction {\n  get version() {\n    return this.message.version;\n  }\n\n  constructor(message, signatures) {\n    this.signatures = void 0;\n    this.message = void 0;\n\n    if (signatures !== undefined) {\n      assert(signatures.length === message.header.numRequiredSignatures, 'Expected signatures length to be equal to the number of required signatures');\n      this.signatures = signatures;\n    } else {\n      const defaultSignatures = [];\n\n      for (let i = 0; i < message.header.numRequiredSignatures; i++) {\n        defaultSignatures.push(new Uint8Array(SIGNATURE_LENGTH_IN_BYTES));\n      }\n\n      this.signatures = defaultSignatures;\n    }\n\n    this.message = message;\n  }\n\n  serialize() {\n    const serializedMessage = this.message.serialize();\n    const encodedSignaturesLength = Array();\n    encodeLength(encodedSignaturesLength, this.signatures.length);\n    const transactionLayout = BufferLayout.struct([BufferLayout.blob(encodedSignaturesLength.length, 'encodedSignaturesLength'), BufferLayout.seq(signature(), this.signatures.length, 'signatures'), BufferLayout.blob(serializedMessage.length, 'serializedMessage')]);\n    const serializedTransaction = new Uint8Array(2048);\n    const serializedTransactionLength = transactionLayout.encode({\n      encodedSignaturesLength: new Uint8Array(encodedSignaturesLength),\n      signatures: this.signatures,\n      serializedMessage\n    }, serializedTransaction);\n    return serializedTransaction.slice(0, serializedTransactionLength);\n  }\n\n  static deserialize(serializedTransaction) {\n    let byteArray = [...serializedTransaction];\n    const signatures = [];\n    const signaturesLength = decodeLength(byteArray);\n\n    for (let i = 0; i < signaturesLength; i++) {\n      signatures.push(new Uint8Array(byteArray.splice(0, SIGNATURE_LENGTH_IN_BYTES)));\n    }\n\n    const message = VersionedMessage.deserialize(new Uint8Array(byteArray));\n    return new VersionedTransaction(message, signatures);\n  }\n\n  sign(signers) {\n    const messageData = this.message.serialize();\n    const signerPubkeys = this.message.staticAccountKeys.slice(0, this.message.header.numRequiredSignatures);\n\n    for (const signer of signers) {\n      const signerIndex = signerPubkeys.findIndex(pubkey => pubkey.equals(signer.publicKey));\n      assert(signerIndex >= 0, `Cannot sign with non signer key ${signer.publicKey.toBase58()}`);\n      this.signatures[signerIndex] = sign(messageData, signer.secretKey);\n    }\n  }\n\n  addSignature(publicKey, signature) {\n    assert(signature.byteLength === 64, 'Signature must be 64 bytes long');\n    const signerPubkeys = this.message.staticAccountKeys.slice(0, this.message.header.numRequiredSignatures);\n    const signerIndex = signerPubkeys.findIndex(pubkey => pubkey.equals(publicKey));\n    assert(signerIndex >= 0, `Can not add signature; \\`${publicKey.toBase58()}\\` is not required to sign this transaction`);\n    this.signatures[signerIndex] = signature;\n  }\n\n}\n\nconst SYSVAR_CLOCK_PUBKEY = new PublicKey('SysvarC1ock11111111111111111111111111111111');\nconst SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey('SysvarEpochSchedu1e111111111111111111111111');\nconst SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey('Sysvar1nstructions1111111111111111111111111');\nconst SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey('SysvarRecentB1ockHashes11111111111111111111');\nconst SYSVAR_RENT_PUBKEY = new PublicKey('SysvarRent111111111111111111111111111111111');\nconst SYSVAR_REWARDS_PUBKEY = new PublicKey('SysvarRewards111111111111111111111111111111');\nconst SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey('SysvarS1otHashes111111111111111111111111111');\nconst SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey('SysvarS1otHistory11111111111111111111111111');\nconst SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey('SysvarStakeHistory1111111111111111111111111');\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nasync function sendAndConfirmTransaction(connection, transaction, signers, options) {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n    minContextSlot: options.minContextSlot\n  };\n  const signature = await connection.sendTransaction(transaction, signers, sendOptions);\n  let status;\n\n  if (transaction.recentBlockhash != null && transaction.lastValidBlockHeight != null) {\n    status = (await connection.confirmTransaction({\n      signature: signature,\n      blockhash: transaction.recentBlockhash,\n      lastValidBlockHeight: transaction.lastValidBlockHeight\n    }, options && options.commitment)).value;\n  } else if (transaction.minNonceContextSlot != null && transaction.nonceInfo != null) {\n    const {\n      nonceInstruction\n    } = transaction.nonceInfo;\n    const nonceAccountPubkey = nonceInstruction.keys[0].pubkey;\n    status = (await connection.confirmTransaction({\n      minContextSlot: transaction.minNonceContextSlot,\n      nonceAccountPubkey,\n      nonceValue: transaction.nonceInfo.nonce,\n      signature\n    }, options && options.commitment)).value;\n  } else {\n    status = (await connection.confirmTransaction(signature, options && options.commitment)).value;\n  }\n\n  if (status.err) {\n    throw new Error(`Transaction ${signature} failed (${JSON.stringify(status)})`);\n  }\n\n  return signature;\n}\n\n// zzz\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nfunction encodeData(type, fields) {\n  const allocLength = type.layout.span >= 0 ? type.layout.span : getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({\n    instruction: type.index\n  }, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\n\nfunction decodeData$1(type, buffer) {\n  let data;\n\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(`invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`);\n  }\n\n  return data;\n}\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\n\nconst FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n/**\n * Calculator for transaction fees.\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\n\nconst NonceAccountLayout = BufferLayout.struct([BufferLayout.u32('version'), BufferLayout.u32('state'), publicKey('authorizedPubkey'), publicKey('nonce'), BufferLayout.struct([FeeCalculatorLayout], 'feeCalculator')]);\nconst NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n/**\n * A durable nonce is a 32 byte value encoded as a base58 string.\n */\n\n/**\n * NonceAccount class\n */\nclass NonceAccount {\n  /**\n   * @internal\n   */\n  constructor(args) {\n    this.authorizedPubkey = void 0;\n    this.nonce = void 0;\n    this.feeCalculator = void 0;\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n\n\n  static fromAccountData(buffer) {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator\n    });\n  }\n\n}\n\nconst encodeDecode = layout => {\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  return {\n    decode,\n    encode\n  };\n};\n\nconst bigInt = length => property => {\n  const layout = blob(length, property);\n  const {\n    encode,\n    decode\n  } = encodeDecode(layout);\n  const bigIntLayout = layout;\n\n  bigIntLayout.decode = (buffer, offset) => {\n    const src = decode(buffer, offset);\n    return toBigIntLE(Buffer.from(src));\n  };\n\n  bigIntLayout.encode = (bigInt, buffer, offset) => {\n    const src = toBufferLE(bigInt, length);\n    return encode(src, buffer, offset);\n  };\n\n  return bigIntLayout;\n};\n\nconst u64 = bigInt(8);\n\n/**\n * Create account system transaction params\n */\n\n/**\n * System Instruction class\n */\nclass SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n\n\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeCreateAccount(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      lamports,\n      space,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Create, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeTransfer(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      lamports\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Transfer, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports\n    };\n  }\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeTransferWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports,\n      seed,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeAllocate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      space\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Allocate, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space\n    };\n  }\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeAllocateWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      base,\n      seed,\n      space,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeAssign(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Assign, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeAssignWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      base,\n      seed,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeCreateWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      base,\n      seed,\n      lamports,\n      space,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeNonceInitialize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      authorized\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized)\n    };\n  }\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeNonceAdvance(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey\n    };\n  }\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeNonceWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {\n      lamports\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports\n    };\n  }\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeNonceAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      authorized\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized)\n    };\n  }\n  /**\n   * @internal\n   */\n\n\n  static checkProgramId(programId) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n\n}\n/**\n * An enumeration of valid SystemInstructionType's\n */\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nconst SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('programId')])\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64('lamports')])\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), BufferLayout.ns64('lamports'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('authorized')])\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('authorized')])\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('space')])\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), publicKey('programId')])\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64('lamports'), rustString('seed'), publicKey('programId')])\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  }\n});\n/**\n * Factory class for transactions to interact with the System program\n */\n\nclass SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the System program\n   */\n\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer())\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.fromPubkey,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: params.newAccountPubkey,\n        isSigner: true,\n        isWritable: true\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n\n\n  static transfer(params) {\n    let data;\n    let keys;\n\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.fromPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports)\n      });\n      keys = [{\n        pubkey: params.fromPubkey,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n\n\n  static assign(params) {\n    let data;\n    let keys;\n\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: true,\n        isWritable: true\n      }];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n\n\n  static createAccountWithSeed(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer())\n    });\n    let keys = [{\n      pubkey: params.fromPubkey,\n      isSigner: true,\n      isWritable: true\n    }, {\n      pubkey: params.newAccountPubkey,\n      isSigner: false,\n      isWritable: true\n    }];\n\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      });\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n\n\n  static createNonceAccount(params) {\n    const transaction = new Transaction();\n\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.noncePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: NONCE_ACCOUNT_LENGTH,\n        programId: this.programId\n      }));\n    } else {\n      transaction.add(SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.noncePubkey,\n        lamports: params.lamports,\n        space: NONCE_ACCOUNT_LENGTH,\n        programId: this.programId\n      }));\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey\n    };\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n\n\n  static nonceInitialize(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer())\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n\n\n  static nonceAdvance(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n\n\n  static nonceWithdraw(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {\n      lamports: params.lamports\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n\n\n  static nonceAuthorize(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer())\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n\n\n  static allocate(params) {\n    let data;\n    let keys;\n\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: true,\n        isWritable: true\n      }];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n}\nSystemProgram.programId = new PublicKey('11111111111111111111111111111111');\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n/**\n * Program loader interface\n */\n\nclass Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength) {\n    return 2 * ( // Every transaction requires two signatures (payer + program)\n    Math.ceil(dataLength / Loader.chunkSize) + 1 + // Add one for Create transaction\n    1) // Add one for Finalize transaction\n    ;\n  }\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n\n\n  static async load(connection, payer, program, programId, data) {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(data.length); // Fetch program account info to check if it has already been created\n\n      const programInfo = await connection.getAccountInfo(program.publicKey, 'confirmed');\n      let transaction = null;\n\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(SystemProgram.allocate({\n            accountPubkey: program.publicKey,\n            space: data.length\n          }));\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(SystemProgram.assign({\n            accountPubkey: program.publicKey,\n            programId\n          }));\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(SystemProgram.transfer({\n            fromPubkey: payer.publicKey,\n            toPubkey: program.publicKey,\n            lamports: balanceNeeded - programInfo.lamports\n          }));\n        }\n      } else {\n        transaction = new Transaction().add(SystemProgram.createAccount({\n          fromPubkey: payer.publicKey,\n          newAccountPubkey: program.publicKey,\n          lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n          space: data.length,\n          programId\n        }));\n      } // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n\n\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed'\n        });\n      }\n    }\n    const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.u32('offset'), BufferLayout.u32('bytesLength'), BufferLayout.u32('bytesLengthPadding'), BufferLayout.seq(BufferLayout.u8('byte'), BufferLayout.offset(BufferLayout.u32(), -8), 'bytes')]);\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode({\n        instruction: 0,\n        // Load instruction\n        offset,\n        bytes: bytes,\n        bytesLength: 0,\n        bytesLengthPadding: 0\n      }, data);\n      const transaction = new Transaction().add({\n        keys: [{\n          pubkey: program.publicKey,\n          isSigner: true,\n          isWritable: true\n        }],\n        programId,\n        data\n      });\n      transactions.push(sendAndConfirmTransaction(connection, transaction, [payer, program], {\n        commitment: 'confirmed'\n      })); // Delay between sends in an attempt to reduce rate limit errors\n\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n\n    await Promise.all(transactions); // Finalize the account loaded with program data for execution\n\n    {\n      const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction')]);\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode({\n        instruction: 1 // Finalize instruction\n\n      }, data);\n      const transaction = new Transaction().add({\n        keys: [{\n          pubkey: program.publicKey,\n          isSigner: true,\n          isWritable: true\n        }, {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }],\n        programId,\n        data\n      });\n      await sendAndConfirmTransaction(connection, transaction, [payer, program], {\n        commitment: 'confirmed'\n      });\n    } // success\n\n    return true;\n  }\n\n}\nLoader.chunkSize = CHUNK_SIZE;\n\nconst BPF_LOADER_PROGRAM_ID = new PublicKey('BPFLoader2111111111111111111111111111111111');\n/**\n * Factory class for transactions to interact with a program loader\n */\n\nclass BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength) {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n  /**\n   * Load a SBF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the SBF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n\n\n  static load(connection, payer, program, elf, loaderProgramId) {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n\n}\n\nvar objToString = Object.prototype.toString;\nvar objKeys = Object.keys || function(obj) {\n\t\tvar keys = [];\n\t\tfor (var name in obj) {\n\t\t\tkeys.push(name);\n\t\t}\n\t\treturn keys;\n\t};\n\nfunction stringify(val, isArrayProp) {\n\tvar i, max, str, keys, key, propVal, toStr;\n\tif (val === true) {\n\t\treturn \"true\";\n\t}\n\tif (val === false) {\n\t\treturn \"false\";\n\t}\n\tswitch (typeof val) {\n\t\tcase \"object\":\n\t\t\tif (val === null) {\n\t\t\t\treturn null;\n\t\t\t} else if (val.toJSON && typeof val.toJSON === \"function\") {\n\t\t\t\treturn stringify(val.toJSON(), isArrayProp);\n\t\t\t} else {\n\t\t\t\ttoStr = objToString.call(val);\n\t\t\t\tif (toStr === \"[object Array]\") {\n\t\t\t\t\tstr = '[';\n\t\t\t\t\tmax = val.length - 1;\n\t\t\t\t\tfor(i = 0; i < max; i++) {\n\t\t\t\t\t\tstr += stringify(val[i], true) + ',';\n\t\t\t\t\t}\n\t\t\t\t\tif (max > -1) {\n\t\t\t\t\t\tstr += stringify(val[i], true);\n\t\t\t\t\t}\n\t\t\t\t\treturn str + ']';\n\t\t\t\t} else if (toStr === \"[object Object]\") {\n\t\t\t\t\t// only object is left\n\t\t\t\t\tkeys = objKeys(val).sort();\n\t\t\t\t\tmax = keys.length;\n\t\t\t\t\tstr = \"\";\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile (i < max) {\n\t\t\t\t\t\tkey = keys[i];\n\t\t\t\t\t\tpropVal = stringify(val[key], false);\n\t\t\t\t\t\tif (propVal !== undefined) {\n\t\t\t\t\t\t\tif (str) {\n\t\t\t\t\t\t\t\tstr += ',';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstr += JSON.stringify(key) + ':' + propVal;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\treturn '{' + str + '}';\n\t\t\t\t} else {\n\t\t\t\t\treturn JSON.stringify(val);\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"function\":\n\t\tcase \"undefined\":\n\t\t\treturn isArrayProp ? null : undefined;\n\t\tcase \"string\":\n\t\t\treturn JSON.stringify(val);\n\t\tdefault:\n\t\t\treturn isFinite(val) ? val : null;\n\t}\n}\n\nvar fastStableStringify = function(val) {\n\tvar returnVal = stringify(val, false);\n\tif (returnVal !== undefined) {\n\t\treturn ''+ returnVal;\n\t}\n};\n\nvar fastStableStringify$1 = fastStableStringify;\n\nconst MINIMUM_SLOT_PER_EPOCH = 32; // Returns the number of trailing zeros in the binary representation of self.\n\nfunction trailingZeros(n) {\n  let trailingZeros = 0;\n\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n\n  return trailingZeros;\n} // Returns the smallest power of two greater than or equal to n\n\n\nfunction nextPowerOfTwo(n) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link connection.getEpochSchedule} method\n */\n\n\nclass EpochSchedule {\n  /** The maximum number of slots in each epoch */\n\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n\n  /** Indicates whether epochs start short and grow */\n\n  /** The first epoch with `slotsPerEpoch` slots */\n\n  /** The first slot of `firstNormalEpoch` */\n  constructor(slotsPerEpoch, leaderScheduleSlotOffset, warmup, firstNormalEpoch, firstNormalSlot) {\n    this.slotsPerEpoch = void 0;\n    this.leaderScheduleSlotOffset = void 0;\n    this.warmup = void 0;\n    this.firstNormalEpoch = void 0;\n    this.firstNormalSlot = void 0;\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot) {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot) {\n    if (slot < this.firstNormalSlot) {\n      const epoch = trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) - trailingZeros(MINIMUM_SLOT_PER_EPOCH) - 1;\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch) {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (epoch - this.firstNormalEpoch) * this.slotsPerEpoch + this.firstNormalSlot;\n    }\n  }\n\n  getLastSlotInEpoch(epoch) {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n\n}\n\nclass SendTransactionError extends Error {\n  constructor(message, logs) {\n    super(message);\n    this.logs = void 0;\n    this.logs = logs;\n  }\n\n} // Keep in sync with client/src/rpc_custom_errors.rs\n// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/\n\nconst SolanaJSONRPCErrorCode = {\n  JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP: -32001,\n  JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE: -32002,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE: -32003,\n  JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE: -32004,\n  JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY: -32005,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE: -32006,\n  JSON_RPC_SERVER_ERROR_SLOT_SKIPPED: -32007,\n  JSON_RPC_SERVER_ERROR_NO_SNAPSHOT: -32008,\n  JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED: -32009,\n  JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX: -32010,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE: -32011,\n  JSON_RPC_SCAN_ERROR: -32012,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH: -32013,\n  JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET: -32014,\n  JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION: -32015,\n  JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED: -32016\n};\nclass SolanaJSONRPCError extends Error {\n  constructor({\n    code,\n    message,\n    data\n  }, customMessage) {\n    super(customMessage != null ? `${customMessage}: ${message}` : message);\n    this.code = void 0;\n    this.data = void 0;\n    this.code = code;\n    this.data = data;\n    this.name = 'SolanaJSONRPCError';\n  }\n\n}\n\nvar fetchImpl = globalThis.fetch;\n\n// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\nconst NUM_TICKS_PER_SECOND = 160;\n/**\n * @internal\n */\n\nconst DEFAULT_TICKS_PER_SLOT = 64;\n/**\n * @internal\n */\n\nconst NUM_SLOTS_PER_SECOND = NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n/**\n * @internal\n */\n\nconst MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n\n/**\n * @internal\n */\n\n/**\n * Decode account data buffer using an AccountType\n * @internal\n */\nfunction decodeData(type, data) {\n  let decoded;\n\n  try {\n    decoded = type.layout.decode(data);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (decoded.typeIndex !== type.index) {\n    throw new Error(`invalid account data; account type mismatch ${decoded.typeIndex} != ${type.index}`);\n  }\n\n  return decoded;\n}\n\n/// The serialized size of lookup table metadata\nconst LOOKUP_TABLE_META_SIZE = 56;\nclass AddressLookupTableAccount {\n  constructor(args) {\n    this.key = void 0;\n    this.state = void 0;\n    this.key = args.key;\n    this.state = args.state;\n  }\n\n  isActive() {\n    const U64_MAX = BigInt('0xffffffffffffffff');\n    return this.state.deactivationSlot === U64_MAX;\n  }\n\n  static deserialize(accountData) {\n    const meta = decodeData(LookupTableMetaLayout, accountData);\n    const serializedAddressesLen = accountData.length - LOOKUP_TABLE_META_SIZE;\n    assert(serializedAddressesLen >= 0, 'lookup table is invalid');\n    assert(serializedAddressesLen % 32 === 0, 'lookup table is invalid');\n    const numSerializedAddresses = serializedAddressesLen / 32;\n    const {\n      addresses\n    } = BufferLayout.struct([BufferLayout.seq(publicKey(), numSerializedAddresses, 'addresses')]).decode(accountData.slice(LOOKUP_TABLE_META_SIZE));\n    return {\n      deactivationSlot: meta.deactivationSlot,\n      lastExtendedSlot: meta.lastExtendedSlot,\n      lastExtendedSlotStartIndex: meta.lastExtendedStartIndex,\n      authority: meta.authority.length !== 0 ? new PublicKey(meta.authority[0]) : undefined,\n      addresses: addresses.map(address => new PublicKey(address))\n    };\n  }\n\n}\nconst LookupTableMetaLayout = {\n  index: 1,\n  layout: BufferLayout.struct([BufferLayout.u32('typeIndex'), u64('deactivationSlot'), BufferLayout.nu64('lastExtendedSlot'), BufferLayout.u8('lastExtendedStartIndex'), BufferLayout.u8(), // option\n  BufferLayout.seq(publicKey(), BufferLayout.offset(BufferLayout.u8(), -1), 'authority')])\n};\n\nconst URL_RE = /^[^:]+:\\/\\/([^:[]+|\\[[^\\]]+\\])(:\\d+)?(.*)/i;\nfunction makeWebsocketUrl(endpoint) {\n  const matches = endpoint.match(URL_RE);\n\n  if (matches == null) {\n    throw TypeError(`Failed to validate endpoint URL \\`${endpoint}\\``);\n  }\n\n  const [_, // eslint-disable-line @typescript-eslint/no-unused-vars\n  hostish, portWithColon, rest] = matches;\n  const protocol = endpoint.startsWith('https:') ? 'wss:' : 'ws:';\n  const startPort = portWithColon == null ? null : parseInt(portWithColon.slice(1), 10);\n  const websocketPort = // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n  // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n  // we're directly trying to connect to solana-validator's ws listening port.\n  // When the endpoint omits the port, we're connecting to the protocol\n  // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n  // proxy which manages WebSocket upgrade and backend port redirection.\n  startPort == null ? '' : `:${startPort + 1}`;\n  return `${protocol}//${hostish}${websocketPort}${rest}`;\n}\n\nvar _process$env$npm_pack;\nconst PublicKeyFromString = coerce(instance(PublicKey), string(), value => new PublicKey(value));\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\nconst BufferFromRawAccountData = coerce(instance(Buffer), RawAccountDataResult, value => Buffer.from(value[0], 'base64'));\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\n\nconst BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\n\n/* @internal */\nfunction assertEndpointUrl(putativeUrl) {\n  if (/^https?:/.test(putativeUrl) === false) {\n    throw new TypeError('Endpoint URL must start with `http:` or `https:`.');\n  }\n\n  return putativeUrl;\n}\n/** @internal */\n\n\nfunction extractCommitmentFromConfig(commitmentOrConfig) {\n  let commitment;\n  let config;\n\n  if (typeof commitmentOrConfig === 'string') {\n    commitment = commitmentOrConfig;\n  } else if (commitmentOrConfig) {\n    const {\n      commitment: specifiedCommitment,\n      ...specifiedConfig\n    } = commitmentOrConfig;\n    commitment = specifiedCommitment;\n    config = specifiedConfig;\n  }\n\n  return {\n    commitment,\n    config\n  };\n}\n/**\n * A strategy for confirming durable nonce transactions.\n */\n\n\n/**\n * @internal\n */\nfunction createRpcResult(result) {\n  return union([type({\n    jsonrpc: literal('2.0'),\n    id: string(),\n    result\n  }), type({\n    jsonrpc: literal('2.0'),\n    id: string(),\n    error: type({\n      code: unknown(),\n      message: string(),\n      data: optional(any())\n    })\n  })]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n/**\n * @internal\n */\n\nfunction jsonRpcResult(schema) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return { ...value,\n        result: create(value.result, schema)\n      };\n    }\n  });\n}\n/**\n * @internal\n */\n\n\nfunction jsonRpcResultAndContext(value) {\n  return jsonRpcResult(type({\n    context: type({\n      slot: number()\n    }),\n    value\n  }));\n}\n/**\n * @internal\n */\n\n\nfunction notificationResultAndContext(value) {\n  return type({\n    context: type({\n      slot: number()\n    }),\n    value\n  });\n}\n/**\n * @internal\n */\n\n\nfunction versionedMessageFromResponse(version, response) {\n  if (version === 0) {\n    return new MessageV0({\n      header: response.header,\n      staticAccountKeys: response.accountKeys.map(accountKey => new PublicKey(accountKey)),\n      recentBlockhash: response.recentBlockhash,\n      compiledInstructions: response.instructions.map(ix => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data)\n      })),\n      addressTableLookups: response.addressTableLookups\n    });\n  } else {\n    return new Message(response);\n  }\n}\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\n\n\nconst GetInflationGovernorResult = type({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number()\n});\n/**\n * The inflation reward for an epoch\n */\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(array(nullable(type({\n  epoch: number(),\n  effectiveSlot: number(),\n  amount: number(),\n  postBalance: number()\n}))));\n/**\n * Information about the current epoch\n */\n\nconst GetEpochInfoResult = type({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number())\n});\nconst GetEpochScheduleResult = type({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number()\n});\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n/**\n * Transaction error or null\n */\n\nconst TransactionErrorResult = nullable(union([type({}), string()]));\n/**\n * Signature status for a transaction\n */\n\nconst SignatureStatusResult = type({\n  err: TransactionErrorResult\n});\n/**\n * Transaction signature received notification\n */\n\nconst SignatureReceivedResult = literal('receivedSignature');\n/**\n * Version info for a node\n */\n\nconst VersionResult = type({\n  'solana-core': string(),\n  'feature-set': optional(number())\n});\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(type({\n  err: nullable(union([type({}), string()])),\n  logs: nullable(array(string())),\n  accounts: optional(nullable(array(nullable(type({\n    executable: boolean(),\n    owner: string(),\n    lamports: number(),\n    data: array(string()),\n    rentEpoch: optional(number())\n  }))))),\n  unitsConsumed: optional(number()),\n  returnData: optional(nullable(type({\n    programId: string(),\n    data: tuple([string(), literal('base64')])\n  })))\n}));\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(type({\n  byIdentity: record(string(), array(number())),\n  range: type({\n    firstSlot: number(),\n    lastSlot: number()\n  })\n}));\n/**\n * A performance sample\n */\n\nfunction createRpcClient(url, httpHeaders, customFetch, fetchMiddleware, disableRetryOnRateLimit) {\n  const fetch = customFetch ? customFetch : fetchImpl;\n\n  let fetchWithMiddleware;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise((resolve, reject) => {\n        try {\n          fetchMiddleware(info, init, (modifiedInfo, modifiedInit) => resolve([modifiedInfo, modifiedInit]));\n        } catch (error) {\n          reject(error);\n        }\n      });\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const agent = undefined;\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign({\n        'Content-Type': 'application/json'\n      }, httpHeaders || {}, COMMON_HTTP_HEADERS)\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res;\n      let waitTime = 500;\n\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429\n        /* Too many requests */\n        ) {\n          break;\n        }\n\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n\n        too_many_requests_retries -= 1;\n\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n\n        console.log(`Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`);\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    } finally {\n    }\n  }, {});\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client) {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err, response) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client) {\n  return requests => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n      const batch = requests.map(params => {\n        return client.request(params.methodName, params.args);\n      });\n      client.request(batch, (err, response) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n\n        resolve(response);\n      });\n    });\n  };\n}\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\n\n\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\n\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\n\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\n\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\n\nconst SlotRpcResult = jsonRpcResult(number());\n/**\n * Supply\n */\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(type({\n  total: number(),\n  circulating: number(),\n  nonCirculating: number(),\n  nonCirculatingAccounts: array(PublicKeyFromString)\n}));\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = type({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string())\n});\n/**\n * Token address and balance.\n */\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(array(type({\n  address: PublicKeyFromString,\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string())\n})));\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\n\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(array(type({\n  pubkey: PublicKeyFromString,\n  account: type({\n    executable: boolean(),\n    owner: PublicKeyFromString,\n    lamports: number(),\n    data: BufferFromRawAccountData,\n    rentEpoch: number()\n  })\n})));\nconst ParsedAccountDataResult = type({\n  program: string(),\n  parsed: unknown(),\n  space: number()\n});\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\n\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(array(type({\n  pubkey: PublicKeyFromString,\n  account: type({\n    executable: boolean(),\n    owner: PublicKeyFromString,\n    lamports: number(),\n    data: ParsedAccountDataResult,\n    rentEpoch: number()\n  })\n})));\n/**\n * Pair of an account address and its balance\n */\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(array(type({\n  lamports: number(),\n  address: PublicKeyFromString\n})));\n/**\n * @internal\n */\n\nconst AccountInfoResult = type({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number()\n});\n/**\n * @internal\n */\n\nconst KeyedAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult\n});\nconst ParsedOrRawAccountData = coerce(union([instance(Buffer), ParsedAccountDataResult]), union([RawAccountDataResult, ParsedAccountDataResult]), value => {\n  if (Array.isArray(value)) {\n    return create(value, BufferFromRawAccountData);\n  } else {\n    return value;\n  }\n});\n/**\n * @internal\n */\n\nconst ParsedAccountInfoResult = type({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number()\n});\nconst KeyedParsedAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult\n});\n/**\n * @internal\n */\n\nconst StakeActivationResult = type({\n  state: union([literal('active'), literal('inactive'), literal('activating'), literal('deactivating')]),\n  active: number(),\n  inactive: number()\n});\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(array(type({\n  signature: string(),\n  slot: number(),\n  err: TransactionErrorResult,\n  memo: nullable(string()),\n  blockTime: optional(nullable(number()))\n})));\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\n\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(array(type({\n  signature: string(),\n  slot: number(),\n  err: TransactionErrorResult,\n  memo: nullable(string()),\n  blockTime: optional(nullable(number()))\n})));\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\n\nconst AccountNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult)\n});\n/**\n * @internal\n */\n\nconst ProgramAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult\n});\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\n\nconst ProgramAccountNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult)\n});\n/**\n * @internal\n */\n\nconst SlotInfoResult = type({\n  parent: number(),\n  slot: number(),\n  root: number()\n});\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\n\nconst SlotNotificationResult = type({\n  subscription: number(),\n  result: SlotInfoResult\n});\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([type({\n  type: union([literal('firstShredReceived'), literal('completed'), literal('optimisticConfirmation'), literal('root')]),\n  slot: number(),\n  timestamp: number()\n}), type({\n  type: literal('createdBank'),\n  parent: number(),\n  slot: number(),\n  timestamp: number()\n}), type({\n  type: literal('frozen'),\n  slot: number(),\n  timestamp: number(),\n  stats: type({\n    numTransactionEntries: number(),\n    numSuccessfulTransactions: number(),\n    numFailedTransactions: number(),\n    maxTransactionsPerEntry: number()\n  })\n}), type({\n  type: literal('dead'),\n  slot: number(),\n  timestamp: number(),\n  err: string()\n})]);\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\n\nconst SlotUpdateNotificationResult = type({\n  subscription: number(),\n  result: SlotUpdateResult\n});\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\n\nconst SignatureNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(union([SignatureStatusResult, SignatureReceivedResult]))\n});\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\n\nconst RootNotificationResult = type({\n  subscription: number(),\n  result: number()\n});\nconst ContactInfoResult = type({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string())\n});\nconst VoteAccountInfoResult = type({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number())\n});\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\n\nconst GetVoteAccounts = jsonRpcResult(type({\n  current: array(VoteAccountInfoResult),\n  delinquent: array(VoteAccountInfoResult)\n}));\nconst ConfirmationStatus = union([literal('processed'), literal('confirmed'), literal('finalized')]);\nconst SignatureStatusResponse = type({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus)\n});\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\n\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(array(nullable(SignatureStatusResponse)));\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\n\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\nconst AddressTableLookupStruct = type({\n  accountKey: PublicKeyFromString,\n  writableIndexes: array(number()),\n  readonlyIndexes: array(number())\n});\nconst ConfirmedTransactionResult = type({\n  signatures: array(string()),\n  message: type({\n    accountKeys: array(string()),\n    header: type({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number()\n    }),\n    instructions: array(type({\n      accounts: array(number()),\n      data: string(),\n      programIdIndex: number()\n    })),\n    recentBlockhash: string(),\n    addressTableLookups: optional(array(AddressTableLookupStruct))\n  })\n});\nconst ParsedInstructionResult = type({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString\n});\nconst RawInstructionResult = type({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString\n});\nconst InstructionResult = union([RawInstructionResult, ParsedInstructionResult]);\nconst UnknownInstructionResult = union([type({\n  parsed: unknown(),\n  program: string(),\n  programId: string()\n}), type({\n  accounts: array(string()),\n  data: string(),\n  programId: string()\n})]);\nconst ParsedOrRawInstruction = coerce(InstructionResult, UnknownInstructionResult, value => {\n  if ('accounts' in value) {\n    return create(value, RawInstructionResult);\n  } else {\n    return create(value, ParsedInstructionResult);\n  }\n});\n/**\n * @internal\n */\n\nconst ParsedConfirmedTransactionResult = type({\n  signatures: array(string()),\n  message: type({\n    accountKeys: array(type({\n      pubkey: PublicKeyFromString,\n      signer: boolean(),\n      writable: boolean(),\n      source: optional(union([literal('transaction'), literal('lookupTable')]))\n    })),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n    addressTableLookups: optional(nullable(array(AddressTableLookupStruct)))\n  })\n});\nconst TokenBalanceResult = type({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult\n});\nconst LoadedAddressesResult = type({\n  writable: array(PublicKeyFromString),\n  readonly: array(PublicKeyFromString)\n});\n/**\n * @internal\n */\n\nconst ConfirmedTransactionMetaResult = type({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(nullable(array(type({\n    index: number(),\n    instructions: array(type({\n      accounts: array(number()),\n      data: string(),\n      programIdIndex: number()\n    }))\n  })))),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number())\n});\n/**\n * @internal\n */\n\nconst ParsedConfirmedTransactionMetaResult = type({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(nullable(array(type({\n    index: number(),\n    instructions: array(ParsedOrRawInstruction)\n  })))),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number())\n});\nconst TransactionVersionStruct = union([literal(0), literal('legacy')]);\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\n\nconst GetBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionResult,\n    meta: nullable(ConfirmedTransactionMetaResult),\n    version: optional(TransactionVersionStruct)\n  })),\n  rewards: optional(array(type({\n    pubkey: string(),\n    lamports: number(),\n    postBalance: nullable(number()),\n    rewardType: nullable(string())\n  }))),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message\n */\n\nconst GetParsedBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ParsedConfirmedTransactionResult,\n    meta: nullable(ParsedConfirmedTransactionMetaResult),\n    version: optional(TransactionVersionStruct)\n  })),\n  rewards: optional(array(type({\n    pubkey: string(),\n    lamports: number(),\n    postBalance: nullable(number()),\n    rewardType: nullable(string())\n  }))),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\n\nconst GetConfirmedBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionResult,\n    meta: nullable(ConfirmedTransactionMetaResult)\n  })),\n  rewards: optional(array(type({\n    pubkey: string(),\n    lamports: number(),\n    postBalance: nullable(number()),\n    rewardType: nullable(string())\n  }))),\n  blockTime: nullable(number())\n})));\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\n\nconst GetBlockSignaturesRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  signatures: array(string()),\n  blockTime: nullable(number())\n})));\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\n\nconst GetTransactionRpcResult = jsonRpcResult(nullable(type({\n  slot: number(),\n  meta: ConfirmedTransactionMetaResult,\n  blockTime: optional(nullable(number())),\n  transaction: ConfirmedTransactionResult,\n  version: optional(TransactionVersionStruct)\n})));\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\n\nconst GetParsedTransactionRpcResult = jsonRpcResult(nullable(type({\n  slot: number(),\n  transaction: ParsedConfirmedTransactionResult,\n  meta: nullable(ParsedConfirmedTransactionMetaResult),\n  blockTime: optional(nullable(number())),\n  version: optional(TransactionVersionStruct)\n})));\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\n\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(type({\n  blockhash: string(),\n  feeCalculator: type({\n    lamportsPerSignature: number()\n  })\n}));\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\n\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(type({\n  blockhash: string(),\n  lastValidBlockHeight: number()\n}));\nconst PerfSampleResult = type({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number()\n});\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\n\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(array(PerfSampleResult));\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\n\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(nullable(type({\n  feeCalculator: type({\n    lamportsPerSignature: number()\n  })\n})));\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\n\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\n\nconst SendTransactionRpcResult = jsonRpcResult(string());\n/**\n * Information about the latest slot being processed by a node\n */\n\n/**\n * @internal\n */\nconst LogsResult = type({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string()\n});\n/**\n * Logs result.\n */\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = type({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number()\n});\n/**\n * Filter for log subscriptions.\n */\n\n/** @internal */\nconst COMMON_HTTP_HEADERS = {\n  'solana-client': `js/${(_process$env$npm_pack = \"0.0.0-development\") !== null && _process$env$npm_pack !== void 0 ? _process$env$npm_pack : 'UNKNOWN'}`\n};\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\n\nclass Connection {\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal\n   * A number that we increment every time an active connection closes.\n   * Used to determine whether the same socket connection that was open\n   * when an async operation started is the same one that's active when\n   * its continuation fires.\n   *\n   */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /**\n   * Special case.\n   * After a signature is processed, RPCs automatically dispose of the\n   * subscription on the server side. We need to track which of these\n   * subscriptions have been disposed in such a way, so that we know\n   * whether the client is dealing with a not-yet-processed signature\n   * (in which case we must tear down the server subscription) or an\n   * already-processed signature (in which case the client can simply\n   * clear out the subscription locally without telling the server).\n   *\n   * NOTE: There is a proposal to eliminate this special case, here:\n   * https://github.com/solana-labs/solana/issues/18892\n   */\n\n  /** @internal */\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(endpoint, commitmentOrConfig) {\n    this._commitment = void 0;\n    this._confirmTransactionInitialTimeout = void 0;\n    this._rpcEndpoint = void 0;\n    this._rpcWsEndpoint = void 0;\n    this._rpcClient = void 0;\n    this._rpcRequest = void 0;\n    this._rpcBatchRequest = void 0;\n    this._rpcWebSocket = void 0;\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketHeartbeat = null;\n    this._rpcWebSocketIdleTimeout = null;\n    this._rpcWebSocketGeneration = 0;\n    this._disableBlockhashCaching = false;\n    this._pollingBlockhash = false;\n    this._blockhashInfo = {\n      latestBlockhash: null,\n      lastFetch: 0,\n      transactionSignatures: [],\n      simulatedSignatures: []\n    };\n    this._nextClientSubscriptionId = 0;\n    this._subscriptionDisposeFunctionsByClientSubscriptionId = {};\n    this._subscriptionHashByClientSubscriptionId = {};\n    this._subscriptionStateChangeCallbacksByHash = {};\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    this._subscriptionsByHash = {};\n    this._subscriptionsAutoDisposedByRpc = new Set();\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout = commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetch = commitmentOrConfig.fetch;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n    }\n\n    this._rpcEndpoint = assertEndpointUrl(endpoint);\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n    this._rpcClient = createRpcClient(endpoint, httpHeaders, fetch, fetchMiddleware, disableRetryOnRateLimit);\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n    this._rpcWebSocket = new Client(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity\n    });\n\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n\n    this._rpcWebSocket.on('accountNotification', this._wsOnAccountNotification.bind(this));\n\n    this._rpcWebSocket.on('programNotification', this._wsOnProgramAccountNotification.bind(this));\n\n    this._rpcWebSocket.on('slotNotification', this._wsOnSlotNotification.bind(this));\n\n    this._rpcWebSocket.on('slotsUpdatesNotification', this._wsOnSlotUpdatesNotification.bind(this));\n\n    this._rpcWebSocket.on('signatureNotification', this._wsOnSignatureNotification.bind(this));\n\n    this._rpcWebSocket.on('rootNotification', this._wsOnRootNotification.bind(this));\n\n    this._rpcWebSocket.on('logsNotification', this._wsOnLogsNotification.bind(this));\n  }\n  /**\n   * The default commitment used for requests\n   */\n\n\n  get commitment() {\n    return this._commitment;\n  }\n  /**\n   * The RPC endpoint\n   */\n\n\n  get rpcEndpoint() {\n    return this._rpcEndpoint;\n  }\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n\n\n  async getBalanceAndContext(publicKey, commitmentOrConfig) {\n    /** @internal */\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n\n    const args = this._buildArgs([publicKey.toBase58()], commitment, undefined\n    /* encoding */\n    , config);\n\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get balance for ${publicKey.toBase58()}`);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the balance for the specified public key\n   */\n\n\n  async getBalance(publicKey, commitmentOrConfig) {\n    return await this.getBalanceAndContext(publicKey, commitmentOrConfig).then(x => x.value).catch(e => {\n      throw new Error('failed to get balance of account ' + publicKey.toBase58() + ': ' + e);\n    });\n  }\n  /**\n   * Fetch the estimated production time of a block\n   */\n\n\n  async getBlockTime(slot) {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get block time for slot ${slot}`);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n\n\n  async getMinimumLedgerSlot() {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get minimum ledger slot');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n\n\n  async getFirstAvailableBlock() {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get first available block');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch information about the current supply\n   */\n\n\n  async getSupply(config) {\n    let configArg = {};\n\n    if (typeof config === 'string') {\n      configArg = {\n        commitment: config\n      };\n    } else if (config) {\n      configArg = { ...config,\n        commitment: config && config.commitment || this.commitment\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get supply');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the current supply of a token mint\n   */\n\n\n  async getTokenSupply(tokenMintAddress, commitment) {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token supply');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the current balance of a token account\n   */\n\n\n  async getTokenAccountBalance(tokenAddress, commitment) {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token account balance');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n\n\n  async getTokenAccountsByOwner(ownerAddress, filter, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    let _args = [ownerAddress.toBase58()];\n\n    if ('mint' in filter) {\n      _args.push({\n        mint: filter.mint.toBase58()\n      });\n    } else {\n      _args.push({\n        programId: filter.programId.toBase58()\n      });\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64', config);\n\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get token accounts owned by account ${ownerAddress.toBase58()}`);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n\n\n  async getParsedTokenAccountsByOwner(ownerAddress, filter, commitment) {\n    let _args = [ownerAddress.toBase58()];\n\n    if ('mint' in filter) {\n      _args.push({\n        mint: filter.mint.toBase58()\n      });\n    } else {\n      _args.push({\n        programId: filter.programId.toBase58()\n      });\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get token accounts owned by account ${ownerAddress.toBase58()}`);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n\n\n  async getLargestAccounts(config) {\n    const arg = { ...config,\n      commitment: config && config.commitment || this.commitment\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n\n\n  async getTokenLargestAccounts(mintAddress, commitment) {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token largest accounts');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n\n\n  async getAccountInfoAndContext(publicKey, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'base64', config);\n\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(AccountInfoResult)));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get info about account ${publicKey.toBase58()}`);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n\n\n  async getParsedAccountInfo(publicKey, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'jsonParsed', config);\n\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get info about account ${publicKey.toBase58()}`);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch all the account info for the specified public key\n   */\n\n\n  async getAccountInfo(publicKey, commitmentOrConfig) {\n    try {\n      const res = await this.getAccountInfoAndContext(publicKey, commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get info about account ' + publicKey.toBase58() + ': ' + e);\n    }\n  }\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n\n\n  async getMultipleParsedAccounts(publicKeys, rawConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(rawConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n\n    const args = this._buildArgs([keys], commitment, 'jsonParsed', config);\n\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(array(nullable(ParsedAccountInfoResult))));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get info for accounts ${keys}`);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n\n\n  async getMultipleAccountsInfoAndContext(publicKeys, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n\n    const args = this._buildArgs([keys], commitment, 'base64', config);\n\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(array(nullable(AccountInfoResult))));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get info for accounts ${keys}`);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n\n\n  async getMultipleAccountsInfo(publicKeys, commitmentOrConfig) {\n    const res = await this.getMultipleAccountsInfoAndContext(publicKeys, commitmentOrConfig);\n    return res.value;\n  }\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n\n\n  async getStakeActivation(publicKey, commitmentOrConfig, epoch) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n\n    const args = this._buildArgs([publicKey.toBase58()], commitment, undefined\n    /* encoding */\n    , { ...config,\n      epoch: epoch != null ? epoch : config === null || config === void 0 ? void 0 : config.epoch\n    });\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get Stake Activation ${publicKey.toBase58()}`);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n\n\n  async getProgramAccounts(programId, configOrCommitment) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(configOrCommitment);\n    const {\n      encoding,\n      ...configWithoutEncoding\n    } = config || {};\n\n    const args = this._buildArgs([programId.toBase58()], commitment, encoding || 'base64', configWithoutEncoding);\n\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get accounts owned by program ${programId.toBase58()}`);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n\n\n  async getParsedProgramAccounts(programId, configOrCommitment) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(configOrCommitment);\n\n    const args = this._buildArgs([programId.toBase58()], commitment, 'jsonParsed', config);\n\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedParsedAccountInfoResult)));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get accounts owned by program ${programId.toBase58()}`);\n    }\n\n    return res.result;\n  }\n\n  // eslint-disable-next-line no-dupe-class-members\n  async confirmTransaction(strategy, commitment) {\n    let rawSignature;\n\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      const config = strategy;\n      rawSignature = config.signature;\n    }\n\n    let decodedSignature;\n\n    try {\n      decodedSignature = bs58.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    if (typeof strategy === 'string') {\n      return await this.confirmTransactionUsingLegacyTimeoutStrategy({\n        commitment: commitment || this.commitment,\n        signature: rawSignature\n      });\n    } else if ('lastValidBlockHeight' in strategy) {\n      return await this.confirmTransactionUsingBlockHeightExceedanceStrategy({\n        commitment: commitment || this.commitment,\n        strategy\n      });\n    } else {\n      return await this.confirmTransactionUsingDurableNonceStrategy({\n        commitment: commitment || this.commitment,\n        strategy\n      });\n    }\n  }\n\n  getTransactionConfirmationPromise({\n    commitment,\n    signature\n  }) {\n    let signatureSubscriptionId;\n    let disposeSignatureSubscriptionStateChangeObserver;\n    let done = false;\n    const confirmationPromise = new Promise((resolve, reject) => {\n      try {\n        signatureSubscriptionId = this.onSignature(signature, (result, context) => {\n          signatureSubscriptionId = undefined;\n          const response = {\n            context,\n            value: result\n          };\n          resolve({\n            __type: TransactionStatus.PROCESSED,\n            response\n          });\n        }, commitment);\n        const subscriptionSetupPromise = new Promise(resolveSubscriptionSetup => {\n          if (signatureSubscriptionId == null) {\n            resolveSubscriptionSetup();\n          } else {\n            disposeSignatureSubscriptionStateChangeObserver = this._onSubscriptionStateChange(signatureSubscriptionId, nextState => {\n              if (nextState === 'subscribed') {\n                resolveSubscriptionSetup();\n              }\n            });\n          }\n        });\n\n        (async () => {\n          await subscriptionSetupPromise;\n          if (done) return;\n          const response = await this.getSignatureStatus(signature);\n          if (done) return;\n\n          if (response == null) {\n            return;\n          }\n\n          const {\n            context,\n            value\n          } = response;\n\n          if (value == null) {\n            return;\n          }\n\n          if (value !== null && value !== void 0 && value.err) {\n            reject(value.err);\n          } else {\n            switch (commitment) {\n              case 'confirmed':\n              case 'single':\n              case 'singleGossip':\n                {\n                  if (value.confirmationStatus === 'processed') {\n                    return;\n                  }\n\n                  break;\n                }\n\n              case 'finalized':\n              case 'max':\n              case 'root':\n                {\n                  if (value.confirmationStatus === 'processed' || value.confirmationStatus === 'confirmed') {\n                    return;\n                  }\n\n                  break;\n                }\n              // exhaust enums to ensure full coverage\n\n              case 'processed':\n              case 'recent':\n            }\n\n            done = true;\n            resolve({\n              __type: TransactionStatus.PROCESSED,\n              response: {\n                context,\n                value\n              }\n            });\n          }\n        })();\n      } catch (err) {\n        reject(err);\n      }\n    });\n\n    const abortConfirmation = () => {\n      if (disposeSignatureSubscriptionStateChangeObserver) {\n        disposeSignatureSubscriptionStateChangeObserver();\n        disposeSignatureSubscriptionStateChangeObserver = undefined;\n      }\n\n      if (signatureSubscriptionId) {\n        this.removeSignatureListener(signatureSubscriptionId);\n        signatureSubscriptionId = undefined;\n      }\n    };\n\n    return {\n      abortConfirmation,\n      confirmationPromise\n    };\n  }\n\n  async confirmTransactionUsingBlockHeightExceedanceStrategy({\n    commitment,\n    strategy: {\n      lastValidBlockHeight,\n      signature\n    }\n  }) {\n    let done = false;\n    const expiryPromise = new Promise(resolve => {\n      const checkBlockHeight = async () => {\n        try {\n          const blockHeight = await this.getBlockHeight(commitment);\n          return blockHeight;\n        } catch (_e) {\n          return -1;\n        }\n      };\n\n      (async () => {\n        let currentBlockHeight = await checkBlockHeight();\n        if (done) return;\n\n        while (currentBlockHeight <= lastValidBlockHeight) {\n          await sleep(1000);\n          if (done) return;\n          currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n        }\n\n        resolve({\n          __type: TransactionStatus.BLOCKHEIGHT_EXCEEDED\n        });\n      })();\n    });\n    const {\n      abortConfirmation,\n      confirmationPromise\n    } = this.getTransactionConfirmationPromise({\n      commitment,\n      signature\n    });\n    let result;\n\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredBlockheightExceededError(signature);\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n\n    return result;\n  }\n\n  async confirmTransactionUsingDurableNonceStrategy({\n    commitment,\n    strategy: {\n      minContextSlot,\n      nonceAccountPubkey,\n      nonceValue,\n      signature\n    }\n  }) {\n    let done = false;\n    const expiryPromise = new Promise(resolve => {\n      let currentNonceValue = nonceValue;\n      let lastCheckedSlot = null;\n\n      const getCurrentNonceValue = async () => {\n        try {\n          const {\n            context,\n            value: nonceAccount\n          } = await this.getNonceAndContext(nonceAccountPubkey, {\n            commitment,\n            minContextSlot\n          });\n          lastCheckedSlot = context.slot;\n          return nonceAccount === null || nonceAccount === void 0 ? void 0 : nonceAccount.nonce;\n        } catch (e) {\n          // If for whatever reason we can't reach/read the nonce\n          // account, just keep using the last-known value.\n          return currentNonceValue;\n        }\n      };\n\n      (async () => {\n        currentNonceValue = await getCurrentNonceValue();\n        if (done) return;\n\n        while (true // eslint-disable-line no-constant-condition\n        ) {\n          if (nonceValue !== currentNonceValue) {\n            resolve({\n              __type: TransactionStatus.NONCE_INVALID,\n              slotInWhichNonceDidAdvance: lastCheckedSlot\n            });\n            return;\n          }\n\n          await sleep(2000);\n          if (done) return;\n          currentNonceValue = await getCurrentNonceValue();\n          if (done) return;\n        }\n      })();\n    });\n    const {\n      abortConfirmation,\n      confirmationPromise\n    } = this.getTransactionConfirmationPromise({\n      commitment,\n      signature\n    });\n    let result;\n\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        var _signatureStatus;\n\n        // Double check that the transaction is indeed unconfirmed.\n        let signatureStatus;\n\n        while (true // eslint-disable-line no-constant-condition\n        ) {\n          var _outcome$slotInWhichN;\n\n          const status = await this.getSignatureStatus(signature);\n\n          if (status == null) {\n            break;\n          }\n\n          if (status.context.slot < ((_outcome$slotInWhichN = outcome.slotInWhichNonceDidAdvance) !== null && _outcome$slotInWhichN !== void 0 ? _outcome$slotInWhichN : minContextSlot)) {\n            await sleep(400);\n            continue;\n          }\n\n          signatureStatus = status;\n          break;\n        }\n\n        if ((_signatureStatus = signatureStatus) !== null && _signatureStatus !== void 0 && _signatureStatus.value) {\n          const commitmentForStatus = commitment || 'finalized';\n          const {\n            confirmationStatus\n          } = signatureStatus.value;\n\n          switch (commitmentForStatus) {\n            case 'processed':\n            case 'recent':\n              if (confirmationStatus !== 'processed' && confirmationStatus !== 'confirmed' && confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n\n              break;\n\n            case 'confirmed':\n            case 'single':\n            case 'singleGossip':\n              if (confirmationStatus !== 'confirmed' && confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n\n              break;\n\n            case 'finalized':\n            case 'max':\n            case 'root':\n              if (confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n\n              break;\n\n            default:\n              // Exhaustive switch.\n              // eslint-disable-next-line @typescript-eslint/no-unused-vars\n              (_ => {})(commitmentForStatus);\n\n          }\n\n          result = {\n            context: signatureStatus.context,\n            value: {\n              err: signatureStatus.value.err\n            }\n          };\n        } else {\n          throw new TransactionExpiredNonceInvalidError(signature);\n        }\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n\n    return result;\n  }\n\n  async confirmTransactionUsingLegacyTimeoutStrategy({\n    commitment,\n    signature\n  }) {\n    let timeoutId;\n    const expiryPromise = new Promise(resolve => {\n      let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n\n      switch (commitment) {\n        case 'processed':\n        case 'recent':\n        case 'single':\n        case 'confirmed':\n        case 'singleGossip':\n          {\n            timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n            break;\n          }\n      }\n\n      timeoutId = setTimeout(() => resolve({\n        __type: TransactionStatus.TIMED_OUT,\n        timeoutMs\n      }), timeoutMs);\n    });\n    const {\n      abortConfirmation,\n      confirmationPromise\n    } = this.getTransactionConfirmationPromise({\n      commitment,\n      signature\n    });\n    let result;\n\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredTimeoutError(signature, outcome.timeoutMs / 1000);\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      abortConfirmation();\n    }\n\n    return result;\n  }\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n\n\n  async getClusterNodes() {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');\n    }\n\n    return res.result;\n  }\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n\n\n  async getVoteAccounts(commitment) {\n    const args = this._buildArgs([], commitment);\n\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the current slot that the node is processing\n   */\n\n\n  async getSlot(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n\n    const args = this._buildArgs([], commitment, undefined\n    /* encoding */\n    , config);\n\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n\n\n  async getSlotLeader(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n\n    const args = this._buildArgs([], commitment, undefined\n    /* encoding */\n    , config);\n\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n\n\n  async getSlotLeaders(startSlot, limit) {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the current status of a signature\n   */\n\n\n  async getSignatureStatus(signature, config) {\n    const {\n      context,\n      value: values\n    } = await this.getSignatureStatuses([signature], config);\n    assert(values.length === 1);\n    const value = values[0];\n    return {\n      context,\n      value\n    };\n  }\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n\n\n  async getSignatureStatuses(signatures, config) {\n    const params = [signatures];\n\n    if (config) {\n      params.push(config);\n    }\n\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signature status');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n\n\n  async getTransactionCount(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n\n    const args = this._buildArgs([], commitment, undefined\n    /* encoding */\n    , config);\n\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction count');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n\n\n  async getTotalSupply(commitment) {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true\n    });\n    return result.value.total;\n  }\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n\n\n  async getInflationGovernor(commitment) {\n    const args = this._buildArgs([], commitment);\n\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n\n\n  async getInflationReward(addresses, epoch, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n\n    const args = this._buildArgs([addresses.map(pubkey => pubkey.toBase58())], commitment, undefined\n    /* encoding */\n    , { ...config,\n      epoch: epoch != null ? epoch : config === null || config === void 0 ? void 0 : config.epoch\n    });\n\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the Epoch Info parameters\n   */\n\n\n  async getEpochInfo(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n\n    const args = this._buildArgs([], commitment, undefined\n    /* encoding */\n    , config);\n\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n\n\n  async getEpochSchedule() {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');\n    }\n\n    const epochSchedule = res.result;\n    return new EpochSchedule(epochSchedule.slotsPerEpoch, epochSchedule.leaderScheduleSlotOffset, epochSchedule.warmup, epochSchedule.firstNormalEpoch, epochSchedule.firstNormalSlot);\n  }\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n\n\n  async getLeaderSchedule() {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n\n\n  async getMinimumBalanceForRentExemption(dataLength, commitment) {\n    const args = this._buildArgs([dataLength], commitment);\n\n    const unsafeRes = await this._rpcRequest('getMinimumBalanceForRentExemption', args);\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n\n\n  async getRecentBlockhashAndContext(commitment) {\n    const args = this._buildArgs([], commitment);\n\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent blockhash');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n\n\n  async getRecentPerformanceSamples(limit) {\n    const unsafeRes = await this._rpcRequest('getRecentPerformanceSamples', limit ? [limit] : []);\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent performance samples');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n\n\n  async getFeeCalculatorForBlockhash(blockhash, commitment) {\n    const args = this._buildArgs([blockhash], commitment);\n\n    const unsafeRes = await this._rpcRequest('getFeeCalculatorForBlockhash', args);\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');\n    }\n\n    const {\n      context,\n      value\n    } = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null\n    };\n  }\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n\n\n  async getFeeForMessage(message, commitment) {\n    const wireMessage = toBuffer(message.serialize()).toString('base64');\n\n    const args = this._buildArgs([wireMessage], commitment);\n\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee for message');\n    }\n\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n\n\n  async getRecentBlockhash(commitment) {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n\n\n  async getLatestBlockhash(commitmentOrConfig) {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n\n\n  async getLatestBlockhashAndContext(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n\n    const args = this._buildArgs([], commitment, undefined\n    /* encoding */\n    , config);\n\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the node version\n   */\n\n\n  async getVersion() {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get version');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the genesis hash\n   */\n\n\n  async getGenesisHash() {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch a processed block from the cluster.\n   *\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(slot, rawConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(rawConfig);\n\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined\n    /* encoding */\n    , config);\n\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n    return { ...result,\n      transactions: result.transactions.map(({\n        transaction,\n        meta,\n        version\n      }) => ({\n        meta,\n        transaction: { ...transaction,\n          message: versionedMessageFromResponse(version, transaction.message)\n        },\n        version\n      }))\n    };\n  }\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized block\n   */\n\n\n  async getParsedBlock(slot, rawConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(rawConfig);\n\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, 'jsonParsed', config);\n\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetParsedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block');\n    }\n\n    return res.result;\n  }\n  /*\n   * Returns the current block height of the node\n   */\n\n\n  async getBlockHeight(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n\n    const args = this._buildArgs([], commitment, undefined\n    /* encoding */\n    , config);\n\n    const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block height information');\n    }\n\n    return res.result;\n  }\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n\n\n  async getBlockProduction(configOrCommitment) {\n    let extra;\n    let commitment;\n\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {\n        commitment: c,\n        ...rest\n      } = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n\n    const args = this._buildArgs([], commitment, 'base64', extra);\n\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block production information');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   *\n   * @deprecated Instead, call `getTransaction` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(signature, rawConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(rawConfig);\n\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment, undefined\n    /* encoding */\n    , config);\n\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n    return { ...result,\n      transaction: { ...result.transaction,\n        message: versionedMessageFromResponse(result.version, result.transaction.message)\n      }\n    };\n  }\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n\n\n  async getParsedTransaction(signature, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed', config);\n\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n\n\n  async getParsedTransactions(signatures, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed', config);\n\n      return {\n        methodName: 'getTransaction',\n        args\n      };\n    });\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map(unsafeRes => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n\n      return res.result;\n    });\n    return res;\n  }\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   *\n   * @deprecated Instead, call `getTransactions` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(signatures, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment, undefined\n      /* encoding */\n      , config);\n\n      return {\n        methodName: 'getTransaction',\n        args\n      };\n    });\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map(unsafeRes => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n\n      const result = res.result;\n      if (!result) return result;\n      return { ...result,\n        transaction: { ...result.transaction,\n          message: versionedMessageFromResponse(result.version, result.transaction.message)\n        }\n      };\n    });\n    return res;\n  }\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n\n\n  async getConfirmedBlock(slot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    const block = { ...result,\n      transactions: result.transactions.map(({\n        transaction,\n        meta\n      }) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: { ...transaction,\n            message\n          }\n        };\n      })\n    };\n    return { ...block,\n      transactions: block.transactions.map(({\n        transaction,\n        meta\n      }) => {\n        return {\n          meta,\n          transaction: Transaction.populate(transaction.message, transaction.signatures)\n        };\n      })\n    };\n  }\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n\n\n  async getBlocks(startSlot, endSlot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed(endSlot !== undefined ? [startSlot, endSlot] : [startSlot], commitment);\n\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get blocks');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n\n\n  async getBlockSignatures(slot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined, {\n      transactionDetails: 'signatures',\n      rewards: false\n    });\n\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block');\n    }\n\n    const result = res.result;\n\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n\n    return result;\n  }\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n\n\n  async getConfirmedBlockSignatures(slot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined, {\n      transactionDetails: 'signatures',\n      rewards: false\n    });\n\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    return result;\n  }\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n\n\n  async getConfirmedTransaction(signature, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return { ...result,\n      transaction: Transaction.populate(message, signatures)\n    };\n  }\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n\n\n  async getParsedConfirmedTransaction(signature, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed transaction');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n\n\n  async getParsedConfirmedTransactions(signatures, commitment) {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n\n      return {\n        methodName: 'getConfirmedTransaction',\n        args\n      };\n    });\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map(unsafeRes => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get confirmed transactions');\n      }\n\n      return res.result;\n    });\n    return res;\n  }\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n\n\n  async getConfirmedSignaturesForAddress(address, startSlot, endSlot) {\n    let options = {};\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n\n    while (!('until' in options)) {\n      startSlot--;\n\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(startSlot, 'finalized');\n\n        if (block.signatures.length > 0) {\n          options.until = block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n\n    while (!('before' in options)) {\n      endSlot++;\n\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n\n        if (block.signatures.length > 0) {\n          options.before = block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(address, options);\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n\n\n  async getConfirmedSignaturesForAddress2(address, options, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([address.toBase58()], commitment, undefined, options);\n\n    const unsafeRes = await this._rpcRequest('getConfirmedSignaturesForAddress2', args);\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed signatures for address');\n    }\n\n    return res.result;\n  }\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n\n\n  async getSignaturesForAddress(address, options, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([address.toBase58()], commitment, undefined, options);\n\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signatures for address');\n    }\n\n    return res.result;\n  }\n\n  async getAddressLookupTable(accountKey, config) {\n    const {\n      context,\n      value: accountInfo\n    } = await this.getAccountInfoAndContext(accountKey, config);\n    let value = null;\n\n    if (accountInfo !== null) {\n      value = new AddressLookupTableAccount({\n        key: accountKey,\n        state: AddressLookupTableAccount.deserialize(accountInfo.data)\n      });\n    }\n\n    return {\n      context,\n      value\n    };\n  }\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n\n\n  async getNonceAndContext(nonceAccount, commitmentOrConfig) {\n    const {\n      context,\n      value: accountInfo\n    } = await this.getAccountInfoAndContext(nonceAccount, commitmentOrConfig);\n    let value = null;\n\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value\n    };\n  }\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n\n\n  async getNonce(nonceAccount, commitmentOrConfig) {\n    return await this.getNonceAndContext(nonceAccount, commitmentOrConfig).then(x => x.value).catch(e => {\n      throw new Error('failed to get nonce for account ' + nonceAccount.toBase58() + ': ' + e);\n    });\n  }\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n\n\n  async requestAirdrop(to, lamports) {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [to.toBase58(), lamports]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `airdrop to ${to.toBase58()} failed`);\n    }\n\n    return res.result;\n  }\n  /**\n   * @internal\n   */\n\n\n  async _blockhashWithExpiryBlockHeight(disableCache) {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n  /**\n   * @internal\n   */\n\n\n  async _pollNewBlockhash() {\n    this._pollingBlockhash = true;\n\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash ? cachedLatestBlockhash.blockhash : null;\n\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: []\n          };\n          return latestBlockhash;\n        } // Sleep for approximately half a slot\n\n\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(`Unable to obtain a new blockhash after ${Date.now() - startTime}ms`);\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n  /**\n   * get the stake minimum delegation\n   */\n\n\n  async getStakeMinimumDelegation(config) {\n    const {\n      commitment,\n      config: configArg\n    } = extractCommitmentFromConfig(config);\n\n    const args = this._buildArgs([], commitment, 'base64', configArg);\n\n    const unsafeRes = await this._rpcRequest('getStakeMinimumDelegation', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get stake minimum delegation`);\n    }\n\n    return res.result;\n  }\n  /**\n   * Simulate a transaction\n   *\n   * @deprecated Instead, call {@link simulateTransaction} with {@link\n   * VersionedTransaction} and {@link SimulateTransactionConfig} parameters\n   */\n\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async simulateTransaction(transactionOrMessage, configOrSigners, includeAccounts) {\n    if ('message' in transactionOrMessage) {\n      const versionedTx = transactionOrMessage;\n      const wireTransaction = versionedTx.serialize();\n      const encodedTransaction = Buffer.from(wireTransaction).toString('base64');\n\n      if (Array.isArray(configOrSigners) || includeAccounts !== undefined) {\n        throw new Error('Invalid arguments');\n      }\n\n      const config = configOrSigners || {};\n      config.encoding = 'base64';\n\n      if (!('commitment' in config)) {\n        config.commitment = this.commitment;\n      }\n\n      const args = [encodedTransaction, config];\n      const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n      const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n\n      if ('error' in res) {\n        throw new Error('failed to simulate transaction: ' + res.error.message);\n      }\n\n      return res.result;\n    }\n\n    let transaction;\n\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage); // HACK: this function relies on mutating the populated transaction\n\n      transaction._message = transaction._json = undefined;\n    }\n\n    if (configOrSigners !== undefined && !Array.isArray(configOrSigners)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = configOrSigners;\n\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(disableCache);\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        if (!signers) break;\n        transaction.sign(...signers);\n\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n\n        if (!this._blockhashInfo.simulatedSignatures.includes(signature) && !this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n\n    const signData = message.serialize();\n\n    const wireTransaction = transaction._serialize(signData);\n\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config = {\n      encoding: 'base64',\n      commitment: this.commitment\n    };\n\n    if (includeAccounts) {\n      const addresses = (Array.isArray(includeAccounts) ? includeAccounts : message.nonProgramIds()).map(key => key.toBase58());\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n\n    if ('error' in res) {\n      let logs;\n\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n\n      throw new SendTransactionError('failed to simulate transaction: ' + res.error.message, logs);\n    }\n\n    return res.result;\n  }\n  /**\n   * Sign and send a transaction\n   *\n   * @deprecated Instead, call {@link sendTransaction} with a {@link\n   * VersionedTransaction}\n   */\n\n\n  /**\n   * Sign and send a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async sendTransaction(transaction, signersOrOptions, options) {\n    if ('version' in transaction) {\n      if (signersOrOptions && Array.isArray(signersOrOptions)) {\n        throw new Error('Invalid arguments');\n      }\n\n      const wireTransaction = transaction.serialize();\n      return await this.sendRawTransaction(wireTransaction, options);\n    }\n\n    if (signersOrOptions === undefined || !Array.isArray(signersOrOptions)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = signersOrOptions;\n\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(disableCache);\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n\n\n  async sendRawTransaction(rawTransaction, options) {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(encodedTransaction, options);\n    return result;\n  }\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n\n\n  async sendEncodedTransaction(encodedTransaction, options) {\n    const config = {\n      encoding: 'base64'\n    };\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment = options && options.preflightCommitment || this.commitment;\n\n    if (options && options.maxRetries != null) {\n      config.maxRetries = options.maxRetries;\n    }\n\n    if (options && options.minContextSlot != null) {\n      config.minContextSlot = options.minContextSlot;\n    }\n\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n\n    if ('error' in res) {\n      let logs;\n\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n\n      throw new SendTransactionError('failed to send transaction: ' + res.error.message, logs);\n    }\n\n    return res.result;\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      this._rpcWebSocket.notify('ping').catch(() => {});\n    }, 5000);\n\n    this._updateSubscriptions();\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnError(err) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnClose(code) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration = (this._rpcWebSocketGeneration + 1) % Number.MAX_SAFE_INTEGER;\n\n    if (this._rpcWebSocketIdleTimeout) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n    }\n\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n\n      return;\n    } // implicit close, prepare subscriptions for auto-reconnect\n\n\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(this._subscriptionsByHash).forEach(([hash, subscription]) => {\n      this._setSubscription(hash, { ...subscription,\n        state: 'pending'\n      });\n    });\n  }\n  /**\n   * @internal\n   */\n\n\n  _setSubscription(hash, nextSubscription) {\n    var _this$_subscriptionsB;\n\n    const prevState = (_this$_subscriptionsB = this._subscriptionsByHash[hash]) === null || _this$_subscriptionsB === void 0 ? void 0 : _this$_subscriptionsB.state;\n    this._subscriptionsByHash[hash] = nextSubscription;\n\n    if (prevState !== nextSubscription.state) {\n      const stateChangeCallbacks = this._subscriptionStateChangeCallbacksByHash[hash];\n\n      if (stateChangeCallbacks) {\n        stateChangeCallbacks.forEach(cb => {\n          try {\n            cb(nextSubscription.state); // eslint-disable-next-line no-empty\n          } catch {}\n        });\n      }\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  _onSubscriptionStateChange(clientSubscriptionId, callback) {\n    var _this$_subscriptionSt;\n\n    const hash = this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n\n    if (hash == null) {\n      return () => {};\n    }\n\n    const stateChangeCallbacks = (_this$_subscriptionSt = this._subscriptionStateChangeCallbacksByHash)[hash] || (_this$_subscriptionSt[hash] = new Set());\n    stateChangeCallbacks.add(callback);\n    return () => {\n      stateChangeCallbacks.delete(callback);\n\n      if (stateChangeCallbacks.size === 0) {\n        delete this._subscriptionStateChangeCallbacksByHash[hash];\n      }\n    };\n  }\n  /**\n   * @internal\n   */\n\n\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(`Error when closing socket connection: ${err.message}`);\n            }\n          }\n        }, 500);\n      }\n\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n\n      return;\n    }\n\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n\n    await Promise.all( // Don't be tempted to change this to `Object.entries`. We call\n    // `_updateSubscriptions` recursively when processing the state,\n    // so it's important that we look up the *current* version of\n    // each subscription, every time we process a hash.\n    Object.keys(this._subscriptionsByHash).map(async hash => {\n      const subscription = this._subscriptionsByHash[hash];\n\n      if (subscription === undefined) {\n        // This entry has since been deleted. Skip.\n        return;\n      }\n\n      switch (subscription.state) {\n        case 'pending':\n        case 'unsubscribed':\n          if (subscription.callbacks.size === 0) {\n            /**\n             * You can end up here when:\n             *\n             * - a subscription has recently unsubscribed\n             *   without having new callbacks added to it\n             *   while the unsubscribe was in flight, or\n             * - when a pending subscription has its\n             *   listeners removed before a request was\n             *   sent to the server.\n             *\n             * Being that nobody is interested in this\n             * subscription any longer, delete it.\n             */\n            delete this._subscriptionsByHash[hash];\n\n            if (subscription.state === 'unsubscribed') {\n              delete this._subscriptionCallbacksByServerSubscriptionId[subscription.serverSubscriptionId];\n            }\n\n            await this._updateSubscriptions();\n            return;\n          }\n\n          await (async () => {\n            const {\n              args,\n              method\n            } = subscription;\n\n            try {\n              this._setSubscription(hash, { ...subscription,\n                state: 'subscribing'\n              });\n\n              const serverSubscriptionId = await this._rpcWebSocket.call(method, args);\n\n              this._setSubscription(hash, { ...subscription,\n                serverSubscriptionId,\n                state: 'subscribed'\n              });\n\n              this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId] = subscription.callbacks;\n              await this._updateSubscriptions();\n            } catch (e) {\n              if (e instanceof Error) {\n                console.error(`${method} error for argument`, args, e.message);\n              }\n\n              if (!isCurrentConnectionStillActive()) {\n                return;\n              } // TODO: Maybe add an 'errored' state or a retry limit?\n\n\n              this._setSubscription(hash, { ...subscription,\n                state: 'pending'\n              });\n\n              await this._updateSubscriptions();\n            }\n          })();\n          break;\n\n        case 'subscribed':\n          if (subscription.callbacks.size === 0) {\n            // By the time we successfully set up a subscription\n            // with the server, the client stopped caring about it.\n            // Tear it down now.\n            await (async () => {\n              const {\n                serverSubscriptionId,\n                unsubscribeMethod\n              } = subscription;\n\n              if (this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)) {\n                /**\n                 * Special case.\n                 * If we're dealing with a subscription that has been auto-\n                 * disposed by the RPC, then we can skip the RPC call to\n                 * tear down the subscription here.\n                 *\n                 * NOTE: There is a proposal to eliminate this special case, here:\n                 * https://github.com/solana-labs/solana/issues/18892\n                 */\n                this._subscriptionsAutoDisposedByRpc.delete(serverSubscriptionId);\n              } else {\n                this._setSubscription(hash, { ...subscription,\n                  state: 'unsubscribing'\n                });\n\n                this._setSubscription(hash, { ...subscription,\n                  state: 'unsubscribing'\n                });\n\n                try {\n                  await this._rpcWebSocket.call(unsubscribeMethod, [serverSubscriptionId]);\n                } catch (e) {\n                  if (e instanceof Error) {\n                    console.error(`${unsubscribeMethod} error:`, e.message);\n                  }\n\n                  if (!isCurrentConnectionStillActive()) {\n                    return;\n                  } // TODO: Maybe add an 'errored' state or a retry limit?\n\n\n                  this._setSubscription(hash, { ...subscription,\n                    state: 'subscribed'\n                  });\n\n                  await this._updateSubscriptions();\n                  return;\n                }\n              }\n\n              this._setSubscription(hash, { ...subscription,\n                state: 'unsubscribed'\n              });\n\n              await this._updateSubscriptions();\n            })();\n          }\n\n          break;\n      }\n    }));\n  }\n  /**\n   * @internal\n   */\n\n\n  _handleServerNotification(serverSubscriptionId, callbackArgs) {\n    const callbacks = this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n\n    if (callbacks === undefined) {\n      return;\n    }\n\n    callbacks.forEach(cb => {\n      try {\n        cb( // I failed to find a way to convince TypeScript that `cb` is of type\n        // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n        // See https://github.com/microsoft/TypeScript/issues/47615\n        // @ts-ignore\n        ...callbackArgs);\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnAccountNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, AccountNotificationResult);\n\n    this._handleServerNotification(subscription, [result.value, result.context]);\n  }\n  /**\n   * @internal\n   */\n\n\n  _makeSubscription(subscriptionConfig,\n  /**\n   * When preparing `args` for a call to `_makeSubscription`, be sure\n   * to carefully apply a default `commitment` property, if necessary.\n   *\n   * - If the user supplied a `commitment` use that.\n   * - Otherwise, if the `Connection::commitment` is set, use that.\n   * - Otherwise, set it to the RPC server default: `finalized`.\n   *\n   * This is extremely important to ensure that these two fundamentally\n   * identical subscriptions produce the same identifying hash:\n   *\n   * - A subscription made without specifying a commitment.\n   * - A subscription made where the commitment specified is the same\n   *   as the default applied to the subscription above.\n   *\n   * Example; these two subscriptions must produce the same hash:\n   *\n   * - An `accountSubscribe` subscription for `'PUBKEY'`\n   * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n   *   `'finalized'`.\n   *\n   * See the 'making a subscription with defaulted params omitted' test\n   * in `connection-subscriptions.ts` for more.\n   */\n  args) {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify$1([subscriptionConfig.method, args], true\n    /* isArrayProp */\n    );\n    const existingSubscription = this._subscriptionsByHash[hash];\n\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = { ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending'\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n\n    this._subscriptionHashByClientSubscriptionId[clientSubscriptionId] = hash;\n\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId];\n      delete this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(subscription !== undefined, `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`);\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n\n    this._updateSubscriptions();\n\n    return clientSubscriptionId;\n  }\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n\n\n  onAccountChange(publicKey, callback, commitment) {\n    const args = this._buildArgs([publicKey.toBase58()], commitment || this._commitment || 'finalized', // Apply connection/server default.\n    'base64');\n\n    return this._makeSubscription({\n      callback,\n      method: 'accountSubscribe',\n      unsubscribeMethod: 'accountUnsubscribe'\n    }, args);\n  }\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n\n\n  async removeAccountChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'account change');\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnProgramAccountNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, ProgramAccountNotificationResult);\n\n    this._handleServerNotification(subscription, [{\n      accountId: result.value.pubkey,\n      accountInfo: result.value.account\n    }, result.context]);\n  }\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n\n\n  onProgramAccountChange(programId, callback, commitment, filters) {\n    const args = this._buildArgs([programId.toBase58()], commitment || this._commitment || 'finalized', // Apply connection/server default.\n    'base64'\n    /* encoding */\n    , filters ? {\n      filters: filters\n    } : undefined\n    /* extra */\n    );\n\n    return this._makeSubscription({\n      callback,\n      method: 'programSubscribe',\n      unsubscribeMethod: 'programUnsubscribe'\n    }, args);\n  }\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n\n\n  async removeProgramAccountChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'program account change');\n  }\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n\n\n  onLogs(filter, callback, commitment) {\n    const args = this._buildArgs([typeof filter === 'object' ? {\n      mentions: [filter.toString()]\n    } : filter], commitment || this._commitment || 'finalized' // Apply connection/server default.\n    );\n\n    return this._makeSubscription({\n      callback,\n      method: 'logsSubscribe',\n      unsubscribeMethod: 'logsUnsubscribe'\n    }, args);\n  }\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id client subscription id to deregister.\n   */\n\n\n  async removeOnLogsListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnLogsNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, LogsNotificationResult);\n\n    this._handleServerNotification(subscription, [result.value, result.context]);\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnSlotNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, SlotNotificationResult);\n\n    this._handleServerNotification(subscription, [result]);\n  }\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n\n\n  onSlotChange(callback) {\n    return this._makeSubscription({\n      callback,\n      method: 'slotSubscribe',\n      unsubscribeMethod: 'slotUnsubscribe'\n    }, []\n    /* args */\n    );\n  }\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n\n\n  async removeSlotChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'slot change');\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnSlotUpdatesNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, SlotUpdateNotificationResult);\n\n    this._handleServerNotification(subscription, [result]);\n  }\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n\n\n  onSlotUpdate(callback) {\n    return this._makeSubscription({\n      callback,\n      method: 'slotsUpdatesSubscribe',\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe'\n    }, []\n    /* args */\n    );\n  }\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n\n\n  async removeSlotUpdateListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'slot update');\n  }\n  /**\n   * @internal\n   */\n\n\n  async _unsubscribeClientSubscription(clientSubscriptionId, subscriptionName) {\n    const dispose = this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId];\n\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn('Ignored unsubscribe request because an active subscription with id ' + `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` + 'could not be found.');\n    }\n  }\n\n  _buildArgs(args, override, encoding, extra) {\n    const commitment = override || this._commitment;\n\n    if (commitment || encoding || extra) {\n      let options = {};\n\n      if (encoding) {\n        options.encoding = encoding;\n      }\n\n      if (commitment) {\n        options.commitment = commitment;\n      }\n\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n\n      args.push(options);\n    }\n\n    return args;\n  }\n  /**\n   * @internal\n   */\n\n\n  _buildArgsAtLeastConfirmed(args, override, encoding, extra) {\n    const commitment = override || this._commitment;\n\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error('Using Connection with default commitment: `' + this._commitment + '`, but method requires at least `confirmed`');\n    }\n\n    return this._buildArgs(args, override, encoding, extra);\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnSignatureNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, SignatureNotificationResult);\n\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n\n    this._handleServerNotification(subscription, result.value === 'receivedSignature' ? [{\n      type: 'received'\n    }, result.context] : [{\n      type: 'status',\n      result: result.value\n    }, result.context]);\n  }\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n\n\n  onSignature(signature, callback, commitment) {\n    const args = this._buildArgs([signature], commitment || this._commitment || 'finalized' // Apply connection/server default.\n    );\n\n    const clientSubscriptionId = this._makeSubscription({\n      callback: (notification, context) => {\n        if (notification.type === 'status') {\n          callback(notification.result, context); // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n\n          try {\n            this.removeSignatureListener(clientSubscriptionId); // eslint-disable-next-line no-empty\n          } catch (_err) {// Already removed.\n          }\n        }\n      },\n      method: 'signatureSubscribe',\n      unsubscribeMethod: 'signatureUnsubscribe'\n    }, args);\n\n    return clientSubscriptionId;\n  }\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n\n\n  onSignatureWithOptions(signature, callback, options) {\n    const {\n      commitment,\n      ...extra\n    } = { ...options,\n      commitment: options && options.commitment || this._commitment || 'finalized' // Apply connection/server default.\n\n    };\n\n    const args = this._buildArgs([signature], commitment, undefined\n    /* encoding */\n    , extra);\n\n    const clientSubscriptionId = this._makeSubscription({\n      callback: (notification, context) => {\n        callback(notification, context); // Signatures subscriptions are auto-removed by the RPC service\n        // so no need to explicitly send an unsubscribe message.\n\n        try {\n          this.removeSignatureListener(clientSubscriptionId); // eslint-disable-next-line no-empty\n        } catch (_err) {// Already removed.\n        }\n      },\n      method: 'signatureSubscribe',\n      unsubscribeMethod: 'signatureUnsubscribe'\n    }, args);\n\n    return clientSubscriptionId;\n  }\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n\n\n  async removeSignatureListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'signature result');\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnRootNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, RootNotificationResult);\n\n    this._handleServerNotification(subscription, [result]);\n  }\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n\n\n  onRootChange(callback) {\n    return this._makeSubscription({\n      callback,\n      method: 'rootSubscribe',\n      unsubscribeMethod: 'rootUnsubscribe'\n    }, []\n    /* args */\n    );\n  }\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n\n\n  async removeRootChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'root change');\n  }\n\n}\n\n/**\n * Keypair signer interface\n */\n\n/**\n * An account keypair used for signing transactions.\n */\nclass Keypair {\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  constructor(keypair) {\n    this._keypair = void 0;\n    this._keypair = keypair !== null && keypair !== void 0 ? keypair : generateKeypair();\n  }\n  /**\n   * Generate a new random keypair\n   */\n\n\n  static generate() {\n    return new Keypair(generateKeypair());\n  }\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n\n\n  static fromSecretKey(secretKey, options) {\n    if (secretKey.byteLength !== 64) {\n      throw new Error('bad secret key size');\n    }\n\n    const publicKey = secretKey.slice(32, 64);\n\n    if (!options || !options.skipValidation) {\n      const privateScalar = secretKey.slice(0, 32);\n      const computedPublicKey = getPublicKey(privateScalar);\n\n      for (let ii = 0; ii < 32; ii++) {\n        if (publicKey[ii] !== computedPublicKey[ii]) {\n          throw new Error('provided secretKey is invalid');\n        }\n      }\n    }\n\n    return new Keypair({\n      publicKey,\n      secretKey\n    });\n  }\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n\n\n  static fromSeed(seed) {\n    const publicKey = getPublicKey(seed);\n    const secretKey = new Uint8Array(64);\n    secretKey.set(seed);\n    secretKey.set(publicKey, 32);\n    return new Keypair({\n      publicKey,\n      secretKey\n    });\n  }\n  /**\n   * The public key for this keypair\n   */\n\n\n  get publicKey() {\n    return new PublicKey(this._keypair.publicKey);\n  }\n  /**\n   * The raw secret key for this keypair\n   */\n\n\n  get secretKey() {\n    return new Uint8Array(this._keypair.secretKey);\n  }\n\n}\n\n/**\n * An enumeration of valid address lookup table InstructionType's\n * @internal\n */\nconst LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({\n  CreateLookupTable: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64('recentSlot'), BufferLayout.u8('bumpSeed')])\n  },\n  FreezeLookupTable: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  ExtendLookupTable: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64(), BufferLayout.seq(publicKey(), BufferLayout.offset(BufferLayout.u32(), -8), 'addresses')])\n  },\n  DeactivateLookupTable: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  CloseLookupTable: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  }\n});\nclass AddressLookupTableInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const index = instructionTypeLayout.decode(instruction.data);\n    let type;\n\n    for (const [layoutType, layout] of Object.entries(LOOKUP_TABLE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == index) {\n        type = layoutType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Invalid Instruction. Should be a LookupTable Instruction');\n    }\n\n    return type;\n  }\n\n  static decodeCreateLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 4);\n    const {\n      recentSlot\n    } = decodeData$1(LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable, instruction.data);\n    return {\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys[2].pubkey,\n      recentSlot: Number(recentSlot)\n    };\n  }\n\n  static decodeExtendLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n\n    if (instruction.keys.length < 2) {\n      throw new Error(`invalid instruction; found ${instruction.keys.length} keys, expected at least 2`);\n    }\n\n    const {\n      addresses\n    } = decodeData$1(LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable, instruction.data);\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,\n      addresses: addresses.map(buffer => new PublicKey(buffer))\n    };\n  }\n\n  static decodeCloseLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 3);\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      recipient: instruction.keys[2].pubkey\n    };\n  }\n\n  static decodeFreezeLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey\n    };\n  }\n\n  static decodeDeactivateLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey\n    };\n  }\n  /**\n   * @internal\n   */\n\n\n  static checkProgramId(programId) {\n    if (!programId.equals(AddressLookupTableProgram.programId)) {\n      throw new Error('invalid instruction; programId is not AddressLookupTable Program');\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  static checkKeysLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n\n}\nclass AddressLookupTableProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static createLookupTable(params) {\n    const [lookupTableAddress, bumpSeed] = PublicKey.findProgramAddressSync([params.authority.toBuffer(), toBufferLE(BigInt(params.recentSlot), 8)], this.programId);\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;\n    const data = encodeData(type, {\n      recentSlot: BigInt(params.recentSlot),\n      bumpSeed: bumpSeed\n    });\n    const keys = [{\n      pubkey: lookupTableAddress,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: params.payer,\n      isSigner: true,\n      isWritable: true\n    }, {\n      pubkey: SystemProgram.programId,\n      isSigner: false,\n      isWritable: false\n    }];\n    return [new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    }), lookupTableAddress];\n  }\n\n  static freezeLookupTable(params) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;\n    const data = encodeData(type);\n    const keys = [{\n      pubkey: params.lookupTable,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    });\n  }\n\n  static extendLookupTable(params) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;\n    const data = encodeData(type, {\n      addresses: params.addresses.map(addr => addr.toBytes())\n    });\n    const keys = [{\n      pubkey: params.lookupTable,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }];\n\n    if (params.payer) {\n      keys.push({\n        pubkey: params.payer,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false\n      });\n    }\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    });\n  }\n\n  static deactivateLookupTable(params) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;\n    const data = encodeData(type);\n    const keys = [{\n      pubkey: params.lookupTable,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    });\n  }\n\n  static closeLookupTable(params) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;\n    const data = encodeData(type);\n    const keys = [{\n      pubkey: params.lookupTable,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: params.recipient,\n      isSigner: false,\n      isWritable: true\n    }];\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    });\n  }\n\n}\nAddressLookupTableProgram.programId = new PublicKey('AddressLookupTab1e1111111111111111111111111');\n\n/**\n * Compute Budget Instruction class\n */\n\nclass ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n\n\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n\n    for (const [ixType, layout] of Object.entries(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a ComputeBudgetInstruction');\n    }\n\n    return type;\n  }\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n\n\n  static decodeRequestUnits(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      units,\n      additionalFee\n    } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits, instruction.data);\n    return {\n      units,\n      additionalFee\n    };\n  }\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n\n\n  static decodeRequestHeapFrame(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      bytes\n    } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame, instruction.data);\n    return {\n      bytes\n    };\n  }\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n\n\n  static decodeSetComputeUnitLimit(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      units\n    } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit, instruction.data);\n    return {\n      units\n    };\n  }\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n\n\n  static decodeSetComputeUnitPrice(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      microLamports\n    } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice, instruction.data);\n    return {\n      microLamports\n    };\n  }\n  /**\n   * @internal\n   */\n\n\n  static checkProgramId(programId) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error('invalid instruction; programId is not ComputeBudgetProgram');\n    }\n  }\n\n}\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nconst COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), BufferLayout.u32('units'), BufferLayout.u32('additionalFee')])\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')])\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), BufferLayout.u32('units')])\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), u64('microLamports')])\n  }\n});\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\n\nclass ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n\n\n  /**\n   * @deprecated Instead, call {@link setComputeUnitLimit} and/or {@link setComputeUnitPrice}\n   */\n  static requestUnits(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n\n  static requestHeapFrame(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n\n  static setComputeUnitLimit(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n\n  static setComputeUnitPrice(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports)\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n\n}\nComputeBudgetProgram.programId = new PublicKey('ComputeBudget111111111111111111111111111111');\n\nconst PRIVATE_KEY_BYTES$1 = 64;\nconst PUBLIC_KEY_BYTES$1 = 32;\nconst SIGNATURE_BYTES = 64;\n/**\n * Params for creating an ed25519 instruction using a public key\n */\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct([BufferLayout.u8('numSignatures'), BufferLayout.u8('padding'), BufferLayout.u16('signatureOffset'), BufferLayout.u16('signatureInstructionIndex'), BufferLayout.u16('publicKeyOffset'), BufferLayout.u16('publicKeyInstructionIndex'), BufferLayout.u16('messageDataOffset'), BufferLayout.u16('messageDataSize'), BufferLayout.u16('messageInstructionIndex')]);\nclass Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the ed25519 program\n   */\n\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(params) {\n    const {\n      publicKey,\n      message,\n      signature,\n      instructionIndex\n    } = params;\n    assert(publicKey.length === PUBLIC_KEY_BYTES$1, `Public Key must be ${PUBLIC_KEY_BYTES$1} bytes but received ${publicKey.length} bytes`);\n    assert(signature.length === SIGNATURE_BYTES, `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`);\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n    const index = instructionIndex == null ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n    : instructionIndex;\n    ED25519_INSTRUCTION_LAYOUT.encode({\n      numSignatures,\n      padding: 0,\n      signatureOffset,\n      signatureInstructionIndex: index,\n      publicKeyOffset,\n      publicKeyInstructionIndex: index,\n      messageDataOffset,\n      messageDataSize: message.length,\n      messageInstructionIndex: index\n    }, instructionData);\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData\n    });\n  }\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n\n\n  static createInstructionWithPrivateKey(params) {\n    const {\n      privateKey,\n      message,\n      instructionIndex\n    } = params;\n    assert(privateKey.length === PRIVATE_KEY_BYTES$1, `Private key must be ${PRIVATE_KEY_BYTES$1} bytes but received ${privateKey.length} bytes`);\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = sign(message, keypair.secretKey);\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n\n}\nEd25519Program.programId = new PublicKey('Ed25519SigVerify111111111111111111111111111');\n\n// library interoperable with the synchronous APIs in web3.js.\n\nsecp256k1.utils.hmacSha256Sync = (key, ...msgs) => {\n  const h = hmac.create(sha256, key);\n  msgs.forEach(msg => h.update(msg));\n  return h.digest();\n};\n\nconst ecdsaSign = (msgHash, privKey) => secp256k1.signSync(msgHash, privKey, {\n  der: false,\n  recovered: true\n});\nsecp256k1.utils.isValidPrivateKey;\nconst publicKeyCreate = secp256k1.getPublicKey;\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct([BufferLayout.u8('numSignatures'), BufferLayout.u16('signatureOffset'), BufferLayout.u8('signatureInstructionIndex'), BufferLayout.u16('ethAddressOffset'), BufferLayout.u8('ethAddressInstructionIndex'), BufferLayout.u16('messageDataOffset'), BufferLayout.u16('messageDataSize'), BufferLayout.u8('messageInstructionIndex'), BufferLayout.blob(20, 'ethAddress'), BufferLayout.blob(64, 'signature'), BufferLayout.u8('recoveryId')]);\nclass Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(publicKey) {\n    assert(publicKey.length === PUBLIC_KEY_BYTES, `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`);\n\n    try {\n      return Buffer.from(keccak_256(toBuffer(publicKey))).slice(-ETHEREUM_ADDRESS_BYTES);\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n\n\n  static createInstructionWithPublicKey(params) {\n    const {\n      publicKey,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex\n    } = params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex\n    });\n  }\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n\n\n  static createInstructionWithEthAddress(params) {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0\n    } = params;\n    let ethAddress;\n\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(ethAddress.length === ETHEREUM_ADDRESS_BYTES, `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`);\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n    const instructionData = Buffer.alloc(SECP256K1_INSTRUCTION_LAYOUT.span + message.length);\n    SECP256K1_INSTRUCTION_LAYOUT.encode({\n      numSignatures,\n      signatureOffset,\n      signatureInstructionIndex: instructionIndex,\n      ethAddressOffset,\n      ethAddressInstructionIndex: instructionIndex,\n      messageDataOffset,\n      messageDataSize: message.length,\n      messageInstructionIndex: instructionIndex,\n      signature: toBuffer(signature),\n      ethAddress: toBuffer(ethAddress),\n      recoveryId\n    }, instructionData);\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData\n    });\n  }\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n\n\n  static createInstructionWithPrivateKey(params) {\n    const {\n      privateKey: pkey,\n      message,\n      instructionIndex\n    } = params;\n    assert(pkey.length === PRIVATE_KEY_BYTES, `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`);\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(privateKey, false\n      /* isCompressed */\n      ).slice(1); // throw away leading byte\n\n      const messageHash = Buffer.from(keccak_256(toBuffer(message)));\n      const [signature, recoveryId] = ecdsaSign(messageHash, privateKey);\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n\n}\nSecp256k1Program.programId = new PublicKey('KeccakSecp256k11111111111111111111111111111');\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\n\nconst STAKE_CONFIG_ID = new PublicKey('StakeConfig11111111111111111111111111111111');\n/**\n * Stake account authority info\n */\n\nclass Authorized {\n  /** stake authority */\n\n  /** withdraw authority */\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker, withdrawer) {\n    this.staker = void 0;\n    this.withdrawer = void 0;\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n\n}\n\n/**\n * Stake account lockup info\n */\nclass Lockup {\n  /** Unix timestamp of lockup expiration */\n\n  /** Epoch of lockup expiration */\n\n  /** Lockup custodian authority */\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp, epoch, custodian) {\n    this.unixTimestamp = void 0;\n    this.epoch = void 0;\n    this.custodian = void 0;\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n  /**\n   * Default, inactive Lockup value\n   */\n\n\n}\nLockup.default = new Lockup(0, 0, PublicKey.default);\n\n/**\n * Stake Instruction class\n */\nclass StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n\n\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeInitialize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      authorized,\n      lockup\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Initialize, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(new PublicKey(authorized.staker), new PublicKey(authorized.withdrawer)),\n      lockup: new Lockup(lockup.unixTimestamp, lockup.epoch, new PublicKey(lockup.custodian))\n    };\n  }\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeDelegate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey\n    };\n  }\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      newAuthorized,\n      stakeAuthorizationType\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Authorize, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType\n      }\n    };\n\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n\n    return o;\n  }\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeAuthorizeWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType\n      }\n    };\n\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n\n    return o;\n  }\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeSplit(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Split, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports\n    };\n  }\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeMerge(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey\n    };\n  }\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {\n      lamports\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Withdraw, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports\n    };\n\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n\n    return o;\n  }\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeDeactivate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey\n    };\n  }\n  /**\n   * @internal\n   */\n\n\n  static checkProgramId(programId) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n\n}\n/**\n * An enumeration of valid StakeInstructionType's\n */\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nconst STAKE_INSTRUCTION_LAYOUTS = Object.freeze({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), authorized(), lockup()])\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('stakeAuthorizationType')])\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('stakeAuthorizationType'), rustString('authoritySeed'), publicKey('authorityOwner')])\n  }\n});\n/**\n * Stake authorization type\n */\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nconst StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0\n  },\n  Withdrawer: {\n    index: 1\n  }\n});\n/**\n * Factory class for transactions to interact with the Stake program\n */\n\nclass StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the Stake program\n   */\n\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params) {\n    const {\n      stakePubkey,\n      authorized,\n      lockup: maybeLockup\n    } = params;\n    const lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer())\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer())\n      }\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n\n\n  static createAccountWithSeed(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccountWithSeed({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.stakePubkey,\n      basePubkey: params.basePubkey,\n      seed: params.seed,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    const {\n      stakePubkey,\n      authorized,\n      lockup\n    } = params;\n    return transaction.add(this.initialize({\n      stakePubkey,\n      authorized,\n      lockup\n    }));\n  }\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n\n\n  static createAccount(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.stakePubkey,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    const {\n      stakePubkey,\n      authorized,\n      lockup\n    } = params;\n    return transaction.add(this.initialize({\n      stakePubkey,\n      authorized,\n      lockup\n    }));\n  }\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n\n\n  static delegate(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      votePubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: votePubkey,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: STAKE_CONFIG_ID,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n\n\n  static authorize(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false\n      });\n    }\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n\n\n  static authorizeWithSeed(params) {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer())\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorityBase,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }];\n\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false\n      });\n    }\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * @internal\n   */\n\n\n  static splitInstruction(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      lamports\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {\n      lamports\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: splitStakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n\n\n  static split(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: params.authorizedPubkey,\n      newAccountPubkey: params.splitStakePubkey,\n      lamports: 0,\n      space: this.space,\n      programId: this.programId\n    }));\n    return transaction.add(this.splitInstruction(params));\n  }\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n\n\n  static splitWithSeed(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.allocate({\n      accountPubkey: splitStakePubkey,\n      basePubkey,\n      seed,\n      space: this.space,\n      programId: this.programId\n    }));\n    return transaction.add(this.splitInstruction({\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      lamports\n    }));\n  }\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n\n\n  static merge(params) {\n    const {\n      stakePubkey,\n      sourceStakePubKey,\n      authorizedPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: sourceStakePubKey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n\n\n  static withdraw(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      toPubkey,\n      lamports,\n      custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {\n      lamports\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: toPubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false\n      });\n    }\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n\n\n  static deactivate(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n}\nStakeProgram.programId = new PublicKey('Stake11111111111111111111111111111111111111');\nStakeProgram.space = 200;\n\n/**\n * Vote account info\n */\n\nclass VoteInit {\n  /** [0, 100] */\n  constructor(nodePubkey, authorizedVoter, authorizedWithdrawer, commission) {\n    this.nodePubkey = void 0;\n    this.authorizedVoter = void 0;\n    this.authorizedWithdrawer = void 0;\n    this.commission = void 0;\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n\n}\n/**\n * Create vote account transaction params\n */\n\n/**\n * Vote Instruction class\n */\nclass VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n\n\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n\n    return type;\n  }\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n\n\n  static decodeInitializeAccount(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n    const {\n      voteInit\n    } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.InitializeAccount, instruction.data);\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(new PublicKey(voteInit.nodePubkey), new PublicKey(voteInit.authorizedVoter), new PublicKey(voteInit.authorizedWithdrawer), voteInit.commission)\n    };\n  }\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n\n\n  static decodeAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      newAuthorized,\n      voteAuthorizationType\n    } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.Authorize, instruction.data);\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType\n      }\n    };\n  }\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n\n\n  static decodeAuthorizeWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey,\n        currentAuthorityDerivedKeySeed,\n        newAuthorized,\n        voteAuthorizationType\n      }\n    } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed, instruction.data);\n    return {\n      currentAuthorityDerivedKeyBasePubkey: instruction.keys[2].pubkey,\n      currentAuthorityDerivedKeyOwnerPubkey: new PublicKey(currentAuthorityDerivedKeyOwnerPubkey),\n      currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType\n      },\n      votePubkey: instruction.keys[0].pubkey\n    };\n  }\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n\n\n  static decodeWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports\n    } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.Withdraw, instruction.data);\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey\n    };\n  }\n  /**\n   * @internal\n   */\n\n\n  static checkProgramId(programId) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n\n}\n/**\n * An enumeration of valid VoteInstructionType's\n */\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), voteInit()])\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('voteAuthorizationType')])\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  AuthorizeWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), voteAuthorizeWithSeedArgs()])\n  }\n});\n/**\n * VoteAuthorize type\n */\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nconst VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0\n  },\n  Withdrawer: {\n    index: 1\n  }\n});\n/**\n * Factory class for transactions to interact with the Vote program\n */\n\nclass VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the Vote program\n   */\n\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(params) {\n    const {\n      votePubkey,\n      nodePubkey,\n      voteInit\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(voteInit.authorizedWithdrawer.toBuffer()),\n        commission: voteInit.commission\n      }\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: votePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: nodePubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n\n\n  static createAccount(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.votePubkey,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    return transaction.add(this.initializeAccount({\n      votePubkey: params.votePubkey,\n      nodePubkey: params.voteInit.nodePubkey,\n      voteInit: params.voteInit\n    }));\n  }\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n\n\n  static authorize(params) {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index\n    });\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account\n   * where the current Voter or Withdrawer authority is a derived key.\n   */\n\n\n  static authorizeWithSeed(params) {\n    const {\n      currentAuthorityDerivedKeyBasePubkey,\n      currentAuthorityDerivedKeyOwnerPubkey,\n      currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n      votePubkey\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey: toBuffer(currentAuthorityDerivedKeyOwnerPubkey.toBuffer()),\n        currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        voteAuthorizationType: voteAuthorizationType.index\n      }\n    });\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: currentAuthorityDerivedKeyBasePubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n\n\n  static withdraw(params) {\n    const {\n      votePubkey,\n      authorizedWithdrawerPubkey,\n      lamports,\n      toPubkey\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {\n      lamports\n    });\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: toPubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorizedWithdrawerPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction to withdraw safely from a Vote account.\n   *\n   * This function was created as a safeguard for vote accounts running validators, `safeWithdraw`\n   * checks that the withdraw amount will not exceed the specified balance while leaving enough left\n   * to cover rent. If you wish to close the vote account by withdrawing the full amount, call the\n   * `withdraw` method directly.\n   */\n\n\n  static safeWithdraw(params, currentVoteAccountBalance, rentExemptMinimum) {\n    if (params.lamports > currentVoteAccountBalance - rentExemptMinimum) {\n      throw new Error('Withdraw will leave vote account with insuffcient funds.');\n    }\n\n    return VoteProgram.withdraw(params);\n  }\n\n}\nVoteProgram.programId = new PublicKey('Vote111111111111111111111111111111111111111');\nVoteProgram.space = 3731;\n\nconst VALIDATOR_INFO_KEY = new PublicKey('Va1idator1nfo111111111111111111111111111111');\n/**\n * @internal\n */\n\nconst InfoString = type({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string())\n});\n/**\n * ValidatorInfo class\n */\n\nclass ValidatorInfo {\n  /**\n   * validator public key\n   */\n\n  /**\n   * validator information\n   */\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key, info) {\n    this.key = void 0;\n    this.info = void 0;\n    this.key = key;\n    this.info = info;\n  }\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n\n\n  static fromConfigData(buffer) {\n    let byteArray = [...buffer];\n    const configKeyCount = decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n    const configKeys = [];\n\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBLIC_KEY_LENGTH));\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({\n        publicKey,\n        isSigner\n      });\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo = rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo);\n        assert$1(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n\n}\n\nconst VOTE_PROGRAM_ID = new PublicKey('Vote111111111111111111111111111111111111111');\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct([publicKey('nodePubkey'), publicKey('authorizedWithdrawer'), BufferLayout.u8('commission'), BufferLayout.nu64(), // votes.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('slot'), BufferLayout.u32('confirmationCount')]), BufferLayout.offset(BufferLayout.u32(), -8), 'votes'), BufferLayout.u8('rootSlotValid'), BufferLayout.nu64('rootSlot'), BufferLayout.nu64(), // authorizedVoters.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('epoch'), publicKey('authorizedVoter')]), BufferLayout.offset(BufferLayout.u32(), -8), 'authorizedVoters'), BufferLayout.struct([BufferLayout.seq(BufferLayout.struct([publicKey('authorizedPubkey'), BufferLayout.nu64('epochOfLastAuthorizedSwitch'), BufferLayout.nu64('targetEpoch')]), 32, 'buf'), BufferLayout.nu64('idx'), BufferLayout.u8('isEmpty')], 'priorVoters'), BufferLayout.nu64(), // epochCredits.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('epoch'), BufferLayout.nu64('credits'), BufferLayout.nu64('prevCredits')]), BufferLayout.offset(BufferLayout.u32(), -8), 'epochCredits'), BufferLayout.struct([BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')], 'lastTimestamp')]);\n\n/**\n * VoteAccount class\n */\nclass VoteAccount {\n  /**\n   * @internal\n   */\n  constructor(args) {\n    this.nodePubkey = void 0;\n    this.authorizedWithdrawer = void 0;\n    this.commission = void 0;\n    this.rootSlot = void 0;\n    this.votes = void 0;\n    this.authorizedVoters = void 0;\n    this.priorVoters = void 0;\n    this.epochCredits = void 0;\n    this.lastTimestamp = void 0;\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n\n\n  static fromAccountData(buffer) {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n    let rootSlot = va.rootSlot;\n\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp\n    });\n  }\n\n}\n\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch\n}) {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter)\n  };\n}\n\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch\n}) {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch\n  };\n}\n\nfunction getPriorVoters({\n  buf,\n  idx,\n  isEmpty\n}) {\n  if (isEmpty) {\n    return [];\n  }\n\n  return [...buf.slice(idx + 1).map(parsePriorVoters), ...buf.slice(0, idx).map(parsePriorVoters)];\n}\n\nconst endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com/'\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com/'\n  }\n};\n\n/**\n * Retrieves the RPC API URL for the specified cluster\n */\nfunction clusterApiUrl(cluster, tls) {\n  const key = tls === false ? 'http' : 'https';\n\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n\n  const url = endpoint[key][cluster];\n\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n\n  return url;\n}\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {BlockheightBasedTransactionConfirmationStrategy} confirmationStrategy\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\n\n/**\n * @deprecated Calling `sendAndConfirmRawTransaction()` without a `confirmationStrategy`\n * is no longer supported and will be removed in a future version.\n */\n// eslint-disable-next-line no-redeclare\n// eslint-disable-next-line no-redeclare\nasync function sendAndConfirmRawTransaction(connection, rawTransaction, confirmationStrategyOrConfirmOptions, maybeConfirmOptions) {\n  let confirmationStrategy;\n  let options;\n\n  if (confirmationStrategyOrConfirmOptions && Object.prototype.hasOwnProperty.call(confirmationStrategyOrConfirmOptions, 'lastValidBlockHeight')) {\n    confirmationStrategy = confirmationStrategyOrConfirmOptions;\n    options = maybeConfirmOptions;\n  } else if (confirmationStrategyOrConfirmOptions && Object.prototype.hasOwnProperty.call(confirmationStrategyOrConfirmOptions, 'nonceValue')) {\n    confirmationStrategy = confirmationStrategyOrConfirmOptions;\n    options = maybeConfirmOptions;\n  } else {\n    options = confirmationStrategyOrConfirmOptions;\n  }\n\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    minContextSlot: options.minContextSlot\n  };\n  const signature = await connection.sendRawTransaction(rawTransaction, sendOptions);\n  const commitment = options && options.commitment;\n  const confirmationPromise = confirmationStrategy ? connection.confirmTransaction(confirmationStrategy, commitment) : connection.confirmTransaction(signature, commitment);\n  const status = (await confirmationPromise).value;\n\n  if (status.err) {\n    throw new Error(`Raw transaction ${signature} failed (${JSON.stringify(status)})`);\n  }\n\n  return signature;\n}\n\n/**\n * There are 1-billion lamports in one SOL\n */\n\nconst LAMPORTS_PER_SOL = 1000000000;\n\nexport { Account, AddressLookupTableAccount, AddressLookupTableInstruction, AddressLookupTableProgram, Authorized, BLOCKHASH_CACHE_TIMEOUT_MS, BPF_LOADER_DEPRECATED_PROGRAM_ID, BPF_LOADER_PROGRAM_ID, BpfLoader, COMPUTE_BUDGET_INSTRUCTION_LAYOUTS, ComputeBudgetInstruction, ComputeBudgetProgram, Connection, Ed25519Program, Enum, EpochSchedule, FeeCalculatorLayout, Keypair, LAMPORTS_PER_SOL, LOOKUP_TABLE_INSTRUCTION_LAYOUTS, Loader, Lockup, MAX_SEED_LENGTH, Message, MessageAccountKeys, MessageV0, NONCE_ACCOUNT_LENGTH, NonceAccount, PACKET_DATA_SIZE, PUBLIC_KEY_LENGTH, PublicKey, SIGNATURE_LENGTH_IN_BYTES, SOLANA_SCHEMA, STAKE_CONFIG_ID, STAKE_INSTRUCTION_LAYOUTS, SYSTEM_INSTRUCTION_LAYOUTS, SYSVAR_CLOCK_PUBKEY, SYSVAR_EPOCH_SCHEDULE_PUBKEY, SYSVAR_INSTRUCTIONS_PUBKEY, SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY, SYSVAR_REWARDS_PUBKEY, SYSVAR_SLOT_HASHES_PUBKEY, SYSVAR_SLOT_HISTORY_PUBKEY, SYSVAR_STAKE_HISTORY_PUBKEY, Secp256k1Program, SendTransactionError, SolanaJSONRPCError, SolanaJSONRPCErrorCode, StakeAuthorizationLayout, StakeInstruction, StakeProgram, Struct, SystemInstruction, SystemProgram, Transaction, TransactionExpiredBlockheightExceededError, TransactionExpiredNonceInvalidError, TransactionExpiredTimeoutError, TransactionInstruction, TransactionMessage, TransactionStatus, VALIDATOR_INFO_KEY, VERSION_PREFIX_MASK, VOTE_PROGRAM_ID, ValidatorInfo, VersionedMessage, VersionedTransaction, VoteAccount, VoteAuthorizationLayout, VoteInit, VoteInstruction, VoteProgram, clusterApiUrl, sendAndConfirmRawTransaction, sendAndConfirmTransaction };\n//# sourceMappingURL=index.browser.esm.js.map\n"],"names":["m","generatePrivateKey","generateKeypair","privateScalar","publicKey","getPublicKey","secretKey","Uint8Array","set","isOnCurve","sign","message","slice","verify","toBuffer","arr","buffer","byteOffset","byteLength","Struct","constructor","properties","Object","assign","this","encode","serialize","SOLANA_SCHEMA","static","data","deserialize","deserializeUnchecked","Enum","super","enum","keys","length","Error","map","key","Map","MAX_SEED_LENGTH","PUBLIC_KEY_LENGTH","uniquePublicKeyCounter","PublicKey","value","_bn","undefined","isPublicKeyData","decoded","equals","eq","toBase58","toBytes","toJSON","b","toArrayLike","zeroPad","copy","toString","fromPublicKey","seed","programId","publicKeyBytes","seeds","forEach","TypeError","createProgramAddressSync","address","nonce","seedsWithNonce","concat","err","findProgramAddressSync","pubkeyData","default","kind","fields","Account","_publicKey","_secretKey","secretKeyBuffer","BPF_LOADER_DEPRECATED_PROGRAM_ID","PACKET_DATA_SIZE","VERSION_PREFIX_MASK","SIGNATURE_LENGTH_IN_BYTES","TransactionExpiredBlockheightExceededError","signature","defineProperty","prototype","TransactionExpiredTimeoutError","timeoutSeconds","toFixed","TransactionExpiredNonceInvalidError","MessageAccountKeys","staticAccountKeys","accountKeysFromLookups","keySegments","push","writable","readonly","get","index","keySegment","flat","compileInstructions","instructions","U8_MAX","keyIndexMap","findKeyIndex","keyIndex","instruction","programIdIndex","accountKeyIndexes","meta","pubkey","property","rustString","rsl","_decode","decode","bind","_encode","rslShim","offset","str","chars","alloc","span","getAlloc","type","getItemAlloc","item","field","Array","isArray","elementLayout","layout","decodeLength","bytes","len","size","elem","shift","encodeLength","rem_len","assert","condition","CompiledKeys","payer","keyMetaMap","getOrInsertDefault","keyMeta","isSigner","isWritable","isInvoked","payerKeyMeta","ix","accountMeta","getMessageComponents","mapEntries","entries","writableSigners","filter","readonlySigners","writableNonSigners","readonlyNonSigners","header","numRequiredSignatures","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","payerAddress","extractTableLookup","lookupTable","writableIndexes","drainedWritableKeys","drainKeysFoundInLookupTable","state","addresses","readonlyIndexes","drainedReadonlyKeys","accountKey","lookupTableEntries","keyMetaFilter","lookupTableIndexes","drainedKeys","lookupTableIndex","findIndex","entry","delete","Message","args","accountKeys","recentBlockhash","indexToProgramIds","account","version","compiledInstructions","accounts","addressTableLookups","getAccountKeys","compiledKeys","compile","payerKey","isAccountSigner","isAccountWritable","numSignedAccounts","isProgramId","has","programIds","values","nonProgramIds","_","numKeys","keyCount","from","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","instructionBufferLength","signDataLayout","transaction","signData","byteArray","accountCount","i","dataSlice","messageArgs","MessageV0","numAccountKeysFromLookups","count","lookup","addressLookupTableAccounts","resolveAddressTableLookups","numStaticAccountKeys","reduce","tableLookup","tableAccount","find","lookupTableAccounts","extractResult","addressTableLookup","encodedStaticAccountKeysLength","serializedInstructions","serializeInstructions","encodedInstructionsLength","serializedAddressTableLookups","serializeAddressTableLookups","encodedAddressTableLookupsLength","messageLayout","serializedMessage","serializedMessageLength","prefix","staticAccountKeysLength","instructionsLength","addressTableLookupsLength","serializedLength","encodedAccountKeyIndexesLength","encodedDataLength","encodedWritableIndexesLength","encodedReadonlyIndexesLength","maskedPrefix","splice","accountKeyIndexesLength","addressTableLookupsCount","writableIndexesLength","readonlyIndexesLength","VersionedMessage","deserializeMessageVersion","TransactionStatus","DEFAULT_SIGNATURE","fill","TransactionInstruction","opts","Transaction","signatures","feePayer","lastValidBlockHeight","nonceInfo","minNonceContextSlot","_message","_json","hasOwnProperty","call","minContextSlot","blockhash","nonceInstruction","signers","add","items","compileMessage","JSON","stringify","console","warn","accountMetas","includes","uniqueMetas","pubkeyString","uniqueIndex","x","sort","y","localeCompare","feePayerIndex","payerMeta","unshift","signedKeys","unsignedKeys","indexOf","_compile","every","pair","serializeMessage","async","connection","getFeeForMessage","setSigners","seen","Set","uniqueSigners","signer","_partialSign","partialSign","_addSignature","addSignature","sigpair","verifySignatures","_verifySignatures","requireAllSignatures","config","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","populate","sigPubkeyPair","some","TransactionMessage","numWritableSignedAccounts","numWritableUnsignedAccounts","compiledIx","compileToLegacyMessage","compileToV0Message","VersionedTransaction","defaultSignatures","encodedSignaturesLength","transactionLayout","serializedTransaction","serializedTransactionLength","signaturesLength","messageData","signerPubkeys","signerIndex","SYSVAR_CLOCK_PUBKEY","SYSVAR_EPOCH_SCHEDULE_PUBKEY","SYSVAR_INSTRUCTIONS_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_REWARDS_PUBKEY","SYSVAR_SLOT_HASHES_PUBKEY","SYSVAR_SLOT_HISTORY_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","sendAndConfirmTransaction","options","sendOptions","skipPreflight","preflightCommitment","commitment","maxRetries","sendTransaction","status","confirmTransaction","nonceAccountPubkey","nonceValue","sleep","ms","Promise","resolve","setTimeout","encodeData","allocLength","layoutFields","decodeData$1","FeeCalculatorLayout","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","NonceAccount","authorizedPubkey","feeCalculator","nonceAccount","u64","encodeDecode","bigIntLayout","src","bigInt","SystemInstruction","checkProgramId","typeIndex","ixType","SYSTEM_INSTRUCTION_LAYOUTS","checkKeyLength","lamports","space","Create","fromPubkey","newAccountPubkey","Transfer","toPubkey","TransferWithSeed","basePubkey","Allocate","accountPubkey","base","AllocateWithSeed","Assign","AssignWithSeed","CreateWithSeed","authorized","InitializeNonceAccount","noncePubkey","AdvanceNonceAccount","WithdrawNonceAccount","AuthorizeNonceAccount","newAuthorizedPubkey","SystemProgram","expectedLength","freeze","UpgradeNonceAccount","params","BigInt","createAccountWithSeed","createAccount","initParams","nonceInitialize","instructionData","CHUNK_SIZE","Loader","Math","ceil","chunkSize","program","balanceNeeded","getMinimumBalanceForRentExemption","programInfo","getAccountInfo","executable","error","allocate","owner","transfer","dataLayout","array","transactions","bytesLength","bytesLengthPadding","_rpcEndpoint","REQUESTS_PER_SECOND","all","BPF_LOADER_PROGRAM_ID","BpfLoader","getMinNumSignatures","elf","loaderProgramId","load","objToString","objKeys","obj","name","val","isArrayProp","max","propVal","toStr","isFinite","fastStableStringify$1","returnVal","trailingZeros","n","EpochSchedule","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","getEpoch","slot","getEpochAndSlotIndex","epoch","getSlotsInEpoch","normalSlotIndex","normalEpochIndex","floor","getFirstSlotInEpoch","pow","getLastSlotInEpoch","SendTransactionError","logs","SolanaJSONRPCErrorCode","JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP","JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE","JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE","JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE","JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY","JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE","JSON_RPC_SERVER_ERROR_SLOT_SKIPPED","JSON_RPC_SERVER_ERROR_NO_SNAPSHOT","JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED","JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX","JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE","JSON_RPC_SCAN_ERROR","JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH","JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET","JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION","JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED","SolanaJSONRPCError","code","customMessage","fetchImpl","globalThis","fetch","AddressLookupTableAccount","isActive","U64_MAX","deactivationSlot","accountData","decodeData","LookupTableMetaLayout","serializedAddressesLen","numSerializedAddresses","lastExtendedSlot","lastExtendedSlotStartIndex","lastExtendedStartIndex","authority","URL_RE","_process$env$npm_pack","PublicKeyFromString","RawAccountDataResult","BufferFromRawAccountData","BLOCKHASH_CACHE_TIMEOUT_MS","extractCommitmentFromConfig","commitmentOrConfig","specifiedCommitment","specifiedConfig","createRpcResult","result","jsonrpc","id","UnknownRpcResult","jsonRpcResult","schema","jsonRpcResultAndContext","context","notificationResultAndContext","versionedMessageFromResponse","response","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetInflationRewardResult","effectiveSlot","amount","postBalance","GetEpochInfoResult","slotIndex","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","GetLeaderScheduleResult","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","VersionResult","SimulatedTransactionResponseStruct","rentEpoch","unitsConsumed","returnData","BlockProductionResponseStruct","byIdentity","range","firstSlot","lastSlot","GetInflationGovernorRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","total","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","ParsedAccountDataResult","parsed","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","active","inactive","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","GetSignaturesForAddressRpcResult","AccountNotificationResult","subscription","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","root","SlotNotificationResult","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","SlotUpdateNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","rpc","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","commission","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","AddressTableLookupStruct","ConfirmedTransactionResult","ParsedInstructionResult","RawInstructionResult","InstructionResult","UnknownInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","source","TokenBalanceResult","accountIndex","mint","uiTokenAmount","LoadedAddressesResult","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","loadedAddresses","computeUnitsConsumed","ParsedConfirmedTransactionMetaResult","TransactionVersionStruct","GetBlockRpcResult","previousBlockhash","parentSlot","rewards","rewardType","GetParsedBlockRpcResult","GetConfirmedBlockRpcResult","GetBlockSignaturesRpcResult","GetTransactionRpcResult","GetParsedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","lamportsPerSignature","GetLatestBlockhashRpcResult","PerfSampleResult","numTransactions","numSlots","samplePeriodSecs","GetRecentPerformanceSamplesRpcResult","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","COMMON_HTTP_HEADERS","Connection","endpoint","wsEndpoint","httpHeaders","fetchMiddleware","disableRetryOnRateLimit","client","_commitment","_confirmTransactionInitialTimeout","_rpcWsEndpoint","_rpcClient","_rpcRequest","_rpcBatchRequest","_rpcWebSocket","_rpcWebSocketConnected","_rpcWebSocketHeartbeat","_rpcWebSocketIdleTimeout","_rpcWebSocketGeneration","_disableBlockhashCaching","_pollingBlockhash","_blockhashInfo","latestBlockhash","lastFetch","transactionSignatures","simulatedSignatures","_nextClientSubscriptionId","_subscriptionDisposeFunctionsByClientSubscriptionId","_subscriptionHashByClientSubscriptionId","_subscriptionStateChangeCallbacksByHash","_subscriptionCallbacksByServerSubscriptionId","_subscriptionsByHash","_subscriptionsAutoDisposedByRpc","confirmTransactionInitialTimeout","putativeUrl","test","assertEndpointUrl","matches","match","hostish","portWithColon","rest","protocol","startsWith","startPort","parseInt","makeWebsocketUrl","url","customFetch","fetchWithMiddleware","info","init","modifiedFetchArgs","reject","modifiedInfo","modifiedInit","request","callback","method","body","agent","headers","res","too_many_requests_retries","waitTime","log","statusText","text","ok","createRpcClient","requests","batch","methodName","createRpcBatchRequest","autoconnect","max_reconnects","Infinity","on","_wsOnOpen","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSlotUpdatesNotification","_wsOnSignatureNotification","_wsOnRootNotification","_wsOnLogsNotification","rpcEndpoint","_buildArgs","unsafeRes","getBalanceAndContext","then","catch","e","configArg","tokenMintAddress","tokenAddress","ownerAddress","_args","arg","mintAddress","getAccountInfoAndContext","publicKeys","rawConfig","getMultipleAccountsInfoAndContext","configOrCommitment","encoding","configWithoutEncoding","strategy","rawSignature","decodedSignature","confirmTransactionUsingLegacyTimeoutStrategy","confirmTransactionUsingBlockHeightExceedanceStrategy","confirmTransactionUsingDurableNonceStrategy","getTransactionConfirmationPromise","signatureSubscriptionId","disposeSignatureSubscriptionStateChangeObserver","done","abortConfirmation","removeSignatureListener","confirmationPromise","onSignature","__type","PROCESSED","subscriptionSetupPromise","resolveSubscriptionSetup","_onSubscriptionStateChange","nextState","getSignatureStatus","expiryPromise","checkBlockHeight","getBlockHeight","_e","currentBlockHeight","BLOCKHEIGHT_EXCEEDED","outcome","race","currentNonceValue","lastCheckedSlot","getCurrentNonceValue","getNonceAndContext","NONCE_INVALID","slotInWhichNonceDidAdvance","_signatureStatus","signatureStatus","_outcome$slotInWhichN","commitmentForStatus","timeoutId","timeoutMs","TIMED_OUT","clearTimeout","startSlot","limit","getSignatureStatuses","getSupply","excludeNonCirculatingAccountsList","epochSchedule","wireMessage","getRecentBlockhashAndContext","getLatestBlockhashAndContext","_buildArgsAtLeastConfirmed","extra","c","block","endSlot","transactionDetails","firstAvailableBlock","getFirstAvailableBlock","getConfirmedBlockSignatures","until","highestConfirmedRoot","getSlot","before","getConfirmedSignaturesForAddress2","accountInfo","fromAccountData","to","disableCache","expired","Date","now","_pollNewBlockhash","startTime","cachedLatestBlockhash","cachedBlockhash","getLatestBlockhash","MS_PER_SLOT","transactionOrMessage","configOrSigners","includeAccounts","encodedTransaction","originalTx","_blockhashWithExpiryBlockHeight","sigVerify","traceIndent","logTrace","join","signersOrOptions","sendRawTransaction","rawTransaction","sendEncodedTransaction","setInterval","notify","_updateSubscriptions","Number","MAX_SAFE_INTEGER","clearInterval","hash","_setSubscription","nextSubscription","_this$_subscriptionsB","prevState","stateChangeCallbacks","cb","clientSubscriptionId","_this$_subscriptionSt","close","connect","activeWebSocketGeneration","isCurrentConnectionStillActive","callbacks","serverSubscriptionId","unsubscribeMethod","_handleServerNotification","callbackArgs","notification","_makeSubscription","subscriptionConfig","existingSubscription","onAccountChange","_unsubscribeClientSubscription","accountId","onProgramAccountChange","filters","onLogs","mentions","onSlotChange","onSlotUpdate","subscriptionName","dispose","override","_err","onSignatureWithOptions","onRootChange","Keypair","keypair","_keypair","skipValidation","computedPublicKey","ii","LOOKUP_TABLE_INSTRUCTION_LAYOUTS","CreateLookupTable","FreezeLookupTable","ExtendLookupTable","DeactivateLookupTable","CloseLookupTable","AddressLookupTableInstruction","layoutType","checkKeysLength","recentSlot","recipient","AddressLookupTableProgram","lookupTableAddress","bumpSeed","addr","ComputeBudgetInstruction","COMPUTE_BUDGET_INSTRUCTION_LAYOUTS","units","additionalFee","RequestUnits","RequestHeapFrame","SetComputeUnitLimit","microLamports","SetComputeUnitPrice","ComputeBudgetProgram","ED25519_INSTRUCTION_LAYOUT","Ed25519Program","instructionIndex","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","privateKey","fromSecretKey","createInstructionWithPublicKey","msgs","h","msg","update","digest","publicKeyCreate","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","recoveryId","createInstructionWithEthAddress","ethAddress","publicKeyToEthAddress","rawAddress","substr","ethAddressOffset","ethAddressInstructionIndex","pkey","messageHash","msgHash","privKey","der","recovered","STAKE_CONFIG_ID","Authorized","staker","withdrawer","Lockup","unixTimestamp","custodian","StakeInstruction","STAKE_INSTRUCTION_LAYOUTS","lockup","Initialize","stakePubkey","Delegate","newAuthorized","stakeAuthorizationType","Authorize","o","custodianPubkey","authoritySeed","authorityOwner","AuthorizeWithSeed","authorityBase","Split","splitStakePubkey","Merge","sourceStakePubKey","Withdraw","Deactivate","StakeProgram","StakeAuthorizationLayout","Staker","Withdrawer","maybeLockup","initialize","splitInstruction","VoteInit","authorizedVoter","authorizedWithdrawer","VoteInstruction","VOTE_INSTRUCTION_LAYOUTS","voteInit","InitializeAccount","voteAuthorizationType","voteAuthorizeWithSeedArgs","currentAuthorityDerivedKeyOwnerPubkey","currentAuthorityDerivedKeySeed","currentAuthorityDerivedKeyBasePubkey","authorizedWithdrawerPubkey","VoteProgram","VoteAuthorizationLayout","Voter","initializeAccount","currentVoteAccountBalance","rentExemptMinimum","withdraw","VALIDATOR_INFO_KEY","InfoString","website","details","keybaseUsername","ValidatorInfo","configKeys","rawInfo","parse","VOTE_PROGRAM_ID","VoteAccountLayout","VoteAccount","votes","authorizedVoters","priorVoters","lastTimestamp","va","rootSlotValid","parseAuthorizedVoter","getPriorVoters","parsePriorVoters","epochOfLastAuthorizedSwitch","targetEpoch","buf","idx","isEmpty","http","devnet","testnet","https","clusterApiUrl","cluster","tls","sendAndConfirmRawTransaction","confirmationStrategyOrConfirmOptions","maybeConfirmOptions","confirmationStrategy","LAMPORTS_PER_SOL"],"sourceRoot":""}